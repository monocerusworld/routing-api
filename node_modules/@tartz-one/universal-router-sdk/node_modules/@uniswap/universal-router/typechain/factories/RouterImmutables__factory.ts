/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RouterImmutables } from "../RouterImmutables";

export class RouterImmutables__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      seaportV1_4: string;
      openseaConduit: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      elementMarket: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
      paymentRecipient: string;
      paymentAmountBips: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<RouterImmutables> {
    return super.deploy(params, overrides || {}) as Promise<RouterImmutables>;
  }
  getDeployTransaction(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      seaportV1_4: string;
      openseaConduit: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      elementMarket: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
      paymentRecipient: string;
      paymentAmountBips: BigNumberish;
    },
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  attach(address: string): RouterImmutables {
    return super.attach(address) as RouterImmutables;
  }
  connect(signer: Signer): RouterImmutables__factory {
    return super.connect(signer) as RouterImmutables__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterImmutables {
    return new Contract(address, _abi, signerOrProvider) as RouterImmutables;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "permit2",
            type: "address",
          },
          {
            internalType: "address",
            name: "weth9",
            type: "address",
          },
          {
            internalType: "address",
            name: "seaport",
            type: "address",
          },
          {
            internalType: "address",
            name: "seaportV1_4",
            type: "address",
          },
          {
            internalType: "address",
            name: "openseaConduit",
            type: "address",
          },
          {
            internalType: "address",
            name: "nftxZap",
            type: "address",
          },
          {
            internalType: "address",
            name: "x2y2",
            type: "address",
          },
          {
            internalType: "address",
            name: "foundation",
            type: "address",
          },
          {
            internalType: "address",
            name: "sudoswap",
            type: "address",
          },
          {
            internalType: "address",
            name: "elementMarket",
            type: "address",
          },
          {
            internalType: "address",
            name: "nft20Zap",
            type: "address",
          },
          {
            internalType: "address",
            name: "cryptopunks",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRare",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "v2Factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "v3Factory",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pairInitCodeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "poolInitCodeHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "paymentRecipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "paymentAmountBips",
            type: "uint256",
          },
        ],
        internalType: "struct RouterParameters",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x3461035d576001600160401b0361038838819003610340601f8201601f191681019084821190821017610347576102c0928291604052610340391261035d576040516102c0810191821181831017610347576102a091604052610063610340610362565b808252610071610360610362565b6020830152610081610380610362565b60408301526100916103a0610362565b60608301526100a16103c0610362565b60808301526100b16103e0610362565b60a08301526100c1610400610362565b60c08301526100d1610420610362565b60e08301526100e1610440610362565b6101008301526100f2610460610362565b610120830152610103610480610362565b6101408301526101146104a0610362565b6101608301526101256104c0610362565b6101808301526101366104e0610362565b6101a0830152610147610500610362565b6101c0830152610158610520610362565b6101e0830152610169610540610362565b61020083015261017a610560610362565b610220830152610580516102408301526105a05161026083015261019f6105c0610362565b6102808381019182526103408501518585019081526001600160a01b0393841660a0908152602086015185166080908152604080880151871660c09081526060890151881660e09081529289015188166101009081529389015188166101209081529089015188166101409081529289015188166101609081529389015188166101809081529089015188166101a09081529289015188166101c09081529389015188166101e09081529089015188166102009081529089015188166102209081529389015188166102409081529289015188166102609081529089015188169095529087015190975285015184166102c0529301516102e0525116610300525161032052516011610377823960805181505060a05181505060c05181505060e05181505061010051815050610120518150506101405181505061016051815050610180518150506101a0518150506101c0518150506101e05181505061020051815050610220518150506102405181505061026051815050610280518150506102a0518150506102c0518150506102e0518150506103005181505061032051815050601190f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b038216820361035d5756fe600080fdfea164736f6c6343000811000a";
