/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { RouterImmutables } from "../RouterImmutables";

export class RouterImmutables__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      seaportV2: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
    },
    overrides?: Overrides
  ): Promise<RouterImmutables> {
    return super.deploy(params, overrides || {}) as Promise<RouterImmutables>;
  }
  getDeployTransaction(
    params: {
      permit2: string;
      weth9: string;
      seaport: string;
      seaportV2: string;
      nftxZap: string;
      x2y2: string;
      foundation: string;
      sudoswap: string;
      nft20Zap: string;
      cryptopunks: string;
      looksRare: string;
      routerRewardsDistributor: string;
      looksRareRewardsDistributor: string;
      looksRareToken: string;
      v2Factory: string;
      v3Factory: string;
      pairInitCodeHash: BytesLike;
      poolInitCodeHash: BytesLike;
    },
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  attach(address: string): RouterImmutables {
    return super.attach(address) as RouterImmutables;
  }
  connect(signer: Signer): RouterImmutables__factory {
    return super.connect(signer) as RouterImmutables__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterImmutables {
    return new Contract(address, _abi, signerOrProvider) as RouterImmutables;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "permit2",
            type: "address",
          },
          {
            internalType: "address",
            name: "weth9",
            type: "address",
          },
          {
            internalType: "address",
            name: "seaport",
            type: "address",
          },
          {
            internalType: "address",
            name: "seaportV2",
            type: "address",
          },
          {
            internalType: "address",
            name: "nftxZap",
            type: "address",
          },
          {
            internalType: "address",
            name: "x2y2",
            type: "address",
          },
          {
            internalType: "address",
            name: "foundation",
            type: "address",
          },
          {
            internalType: "address",
            name: "sudoswap",
            type: "address",
          },
          {
            internalType: "address",
            name: "nft20Zap",
            type: "address",
          },
          {
            internalType: "address",
            name: "cryptopunks",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRare",
            type: "address",
          },
          {
            internalType: "address",
            name: "routerRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareRewardsDistributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "looksRareToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "v2Factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "v3Factory",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pairInitCodeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "poolInitCodeHash",
            type: "bytes32",
          },
        ],
        internalType: "struct RouterParameters",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x346102d6576001600160401b03610301388190036102c0601f8201601f1916810190848211908210176102c0576102409282916040526102c039126102d6576040516102408101918211818310176102c057610220916040526100636102c06102db565b8082526100716102e06102db565b60208301526100816103006102db565b60408301526100916103206102db565b60608301526100a16103406102db565b60808301526100b16103606102db565b60a08301526100c16103806102db565b60c08301526100d16103a06102db565b60e08301526100e16103c06102db565b6101008301526100f26103e06102db565b6101208301526101036104006102db565b6101408301526101146104206102db565b6101608301526101256104406102db565b6101808301526101366104606102db565b6101a08301526101476104806102db565b6101c08301526101586104a06102db565b6101e08381019182526104c0516102008086019182526102c08701518787019081526001600160a01b0395861660a09081526020880151871660809081526040808a0151891660c090815260608b01518a1660e0908152928b01518a16610100908152938b01518a16610120908152908b01518a16610140908152928b01518a16610160908152938b01518a16610180908152908b01518a166101a0908152928b01518a166101c0908152928b01518a1690975295890151881690935287015186169097529094015183166102405292516102605251166102805290516102a0525160116102f0823960805181505060a05181505060c05181505060e05181505061010051815050610120518150506101405181505061016051815050610180518150506101a0518150506101c0518150506101e05181505061020051815050610220518150506102405181505061026051815050610280518150506102a051815050601190f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b03821682036102d65756fe600080fdfea164736f6c6343000811000a";
