{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/NFTTrade.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRare.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT = 0x10,\n  LOOKS_RARE_721 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  LOOKS_RARE_1155 = 0x14,\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  EXECUTE_SUB_PLAN = 0x20,\n  SEAPORT_V1_4 = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_721,\n  CommandType.LOOKS_RARE_1155,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.LOOKS_RARE_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1: // mainnet\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 5: // goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 137: // polygon\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 80001: // polygon mumbai\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 10: // optimism\n      return '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654'\n    case 420: // optimism goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 42161: // arbitrum\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 421613: // arbitrum goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 42220: // celo\n      return '0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F'\n    case 44787: // celo alfajores\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 56: // binance smart chain\n      return '0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897'    \n    case 250: // fantom\n      return '0x44F5661f3CB3BEa2D088a45674559598D29822fa'\n    case 100: // gnosis\n      return '0xfD3a57baf3e072eAF4afBca7a6aCC597CE59edE1'\n    case 43114: // avalanche\n      return '0x8F34B0819B489D3C036C2e79e93cE8c88386Bdec'\n    case 1284: // moonbeam\n      return '0x6bFcf732f736d1a23805E0e633632364BCD64206'\n    default:\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  }\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1: //mainnet\n      return '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\n    case 5: // goerli\n      return '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6'\n    case 137: // polygon\n      return '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n    case 80001: // polygon mumbai\n      return '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889'\n    case 10: // optimism\n      return '0x4200000000000000000000000000000000000006'\n    case 420: // optimism goerli\n      return '0x4200000000000000000000000000000000000006'\n    case 42161: // arbitrum\n      return '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1'\n    case 421613: // arbitrum goerli\n      return '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3'\n    case 56: // binance smart chain\n      return '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'\n    case 250: // fantom\n      return '0x74b23882a30290451A17c44f4F05243b6b58C76d'\n    case 100: // gnosis\n      return '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1'\n    case 43114: // avalanche\n      return '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB'\n    case 1284: // moonbeam\n      return '0xab3f0245B83feB11d15AAffeFD7AD465a59817eD'\n    default:\n      throw new Error(`WETH9 or UniversalRouter not deployed on chain ${chainId}`)\n  }\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000006c3852cbef3e08e8df289169ede581': // Seaport v1.1\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo)\n    if (nftTrades.length > 0) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { LooksRareData } from './protocols/looksRare'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareData\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRare = 'looksrare',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport abi from '../../../abis/LooksRare.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type MakerOrder = {\n  collection: string\n  tokenId: BigNumberish\n  isOrderAsk: true\n  signer: string\n  strategy: string\n  currency: string\n  amount: BigNumberish\n  price: BigNumberish\n  minPercentageToAsk: BigNumberish\n  nonce: BigNumberish\n  startTime: BigNumberish\n  endTime: BigNumberish\n  v: BigNumberish\n  r: string\n  s: string\n  params: string\n}\n\nexport type TakerOrder = {\n  minPercentageToAsk: BigNumberish\n  price: BigNumberish\n  taker: string\n  tokenId: BigNumberish\n  isOrderAsk: boolean\n  params: string\n}\n\nexport type LooksRareData = {\n  makerOrder: MakerOrder\n  takerOrder: TakerOrder\n  recipient: string\n  tokenType: TokenType\n}\n\nexport class LooksRareTrade extends NFTTrade<LooksRareData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: LooksRareData[]) {\n    super(Market.LooksRare, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = LooksRareTrade.INTERFACE.encodeFunctionData('matchAskWithTakerBidUsingETHAndWETH', [\n        item.takerOrder,\n        item.makerOrder,\n      ])\n\n      if (item.tokenType == TokenType.ERC721) {\n        invariant(item.makerOrder.amount == 1, 'ERC721 token amount must be 1')\n        planner.addCommand(\n          CommandType.LOOKS_RARE_721,\n          [item.makerOrder.price, calldata, item.recipient, item.makerOrder.collection, item.makerOrder.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.LOOKS_RARE_1155,\n          [\n            item.makerOrder.price,\n            calldata,\n            item.recipient,\n            item.makerOrder.collection,\n            item.makerOrder.tokenId,\n            item.makerOrder.amount,\n          ],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.makerOrder.collection,\n        tokenId: item.makerOrder.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.makerOrder.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Ether } from '@uniswap/sdk-core'\n\nexport type NFTXData = {\n  recipient: string\n  vaultAddress: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        [Ether.onChain(1).wrapped.address, order.vaultAddress],\n        order.recipient,\n      ])\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000006c3852cbef3e08e8df289169ede581': // Seaport v1.1\n        return CommandType.SEAPORT\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token == token ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(permit2.details.token === this.wethAddress, `must be permitting WETH address: ${this.wethAddress}`)\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","CommandType","REVERTIBLE_COMMANDS","Set","SEAPORT","SEAPORT_V1_4","NFTX","LOOKS_RARE_721","LOOKS_RARE_1155","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","this","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","length","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","priceImpact","greaterThan","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","invariant","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","orders","currentNativeValueInRouter","transactionValue","NFTTrade","nftTrade","tradePrice","getTotalPrice","lt","add","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","Market","TokenType","market","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareTrade","LooksRare","takerOrder","makerOrder","collection","ERC1155","NFT20Trade","order","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","Ether","onChain","vaultAddress","SeaportTrade","Seaport","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","totalOrderPrice","calculateValue","consideration","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}