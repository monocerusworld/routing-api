/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PaymentsImmutables } from "../PaymentsImmutables";

export class PaymentsImmutables__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    params: {
      permit2: string;
      weth9: string;
      steth: string;
      wsteth: string;
      openseaConduit: string;
      sudoswap: string;
    },
    overrides?: Overrides
  ): Promise<PaymentsImmutables> {
    return super.deploy(params, overrides || {}) as Promise<PaymentsImmutables>;
  }
  getDeployTransaction(
    params: {
      permit2: string;
      weth9: string;
      steth: string;
      wsteth: string;
      openseaConduit: string;
      sudoswap: string;
    },
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  attach(address: string): PaymentsImmutables {
    return super.attach(address) as PaymentsImmutables;
  }
  connect(signer: Signer): PaymentsImmutables__factory {
    return super.connect(signer) as PaymentsImmutables__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PaymentsImmutables {
    return new Contract(address, _abi, signerOrProvider) as PaymentsImmutables;
  }
}

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "permit2",
            type: "address",
          },
          {
            internalType: "address",
            name: "weth9",
            type: "address",
          },
          {
            internalType: "address",
            name: "steth",
            type: "address",
          },
          {
            internalType: "address",
            name: "wsteth",
            type: "address",
          },
          {
            internalType: "address",
            name: "openseaConduit",
            type: "address",
          },
          {
            internalType: "address",
            name: "sudoswap",
            type: "address",
          },
        ],
        internalType: "struct PaymentsParameters",
        name: "params",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6101403461013b576001600160401b0390601f61016638819003918201601f1916830192919084841183851017610125578160c0928492604096875283398101031261013b5781519260c084019081118482101761012557825261006281610140565b835261007060208201610140565b90816020850152610082838201610140565b9083850191825261009560608201610140565b92606086019384526100bc60a06100ae60808501610140565b936080890194855201610140565b9560a0810196875260018060a01b03809581809681809616608052511660a052511660c052511660e052511692610100938452511690610120918252519060119283610155843960805183505060a05183505060c05183505060e0518350505182505051815050f35b634e487b7160e01b600052604160045260246000fd5b600080fd5b51906001600160a01b038216820361013b5756fe600080fdfea164736f6c6343000811000a";
