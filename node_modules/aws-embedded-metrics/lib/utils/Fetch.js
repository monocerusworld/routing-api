"use strict";
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates.
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const SOCKET_TIMEOUT = 1000;
/**
 * Fetch data from a remote HTTP endpoint with the provided headers.
 *
 * @param options - HTTP request options
 */
const fetch = (options) => {
    return new Promise((resolve, reject) => {
        const request = http_1.request(options, (response) => {
            if (!response.statusCode) {
                reject(`Received undefined response status code from '${options.host}${options.path}'`);
                return;
            }
            if (response.statusCode < 200 || response.statusCode > 299) {
                reject(new Error('Failed to load page, status code: ' + response.statusCode));
                return;
            }
            // using similar approach to node-fetch
            // https://github.com/bitinn/node-fetch/blob/6a5d192034a0f438551dffb6d2d8df2c00921d16/src/body.js#L217
            const body = [];
            let bodyBytes = 0;
            response.on('data', (chunk) => {
                bodyBytes += chunk.length;
                body.push(chunk);
            });
            response.on('end', () => {
                const buffer = Buffer.concat(body, bodyBytes);
                resolve(buffer);
            });
        })
            .on('error', (err) => {
            reject(err);
        });
        request.on('socket', socket => {
            socket.on('timeout', () => {
                request.abort();
                reject(`Socket timeout while connecting to '${options.host}${options.path}'`);
            });
            socket.setTimeout(SOCKET_TIMEOUT);
        });
        request.end();
    });
};
exports.fetch = fetch;
/**
 * Fetch a string from a remote HTTP endpoint with the provided headers.
 *
 * @param options - HTTP request options
 */
const fetchString = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const buffer = yield fetch(options);
    return buffer.toString();
});
exports.fetchString = fetchString;
/**
 * Fetch JSON data from a remote HTTP endpoint with the provided headers and de-serialize to the provided type.
 * There are no guarantees the response will conform to the contract defined by T.
 * It is up to the consumer to ensure the provided T captures all possible response types
 * from the provided endpoint.
 *
 * @param options - HTTP request options
 */
const fetchJSON = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const responseString = yield fetchString(options);
    return JSON.parse(responseString);
});
exports.fetchJSON = fetchJSON;
