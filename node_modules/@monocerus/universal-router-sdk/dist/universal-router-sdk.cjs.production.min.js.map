{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\r\n\r\nexport type TradeConfig = {\r\n  allowRevert: boolean\r\n}\r\n\r\nexport enum RouterTradeType {\r\n  UniswapTrade = 'UniswapTrade',\r\n  NFTTrade = 'NFTTrade',\r\n  UnwrapWETH = 'UnwrapWETH',\r\n}\r\n\r\n// interface for entities that can be encoded as a Universal Router command\r\nexport interface Command {\r\n  tradeType: RouterTradeType\r\n  encode(planner: RoutePlanner, config: TradeConfig): void\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\nimport { SeaportData } from './protocols/seaport'\r\nimport { FoundationData } from './protocols/foundation'\r\nimport { NFTXData } from './protocols/nftx'\r\nimport { NFT20Data } from './protocols/nft20'\r\nimport { RoutePlanner } from '../utils/routerCommands'\r\nimport { Command, RouterTradeType, TradeConfig } from './Command'\r\nimport { SudoswapData } from './protocols/sudoswap'\r\nimport { CryptopunkData } from './protocols/cryptopunk'\r\nimport { X2Y2Data } from './protocols/x2y2'\r\nimport { ElementData } from './protocols/element-market'\r\nimport { LooksRareV2Data } from './protocols/looksRareV2'\r\n\r\nexport type SupportedProtocolsData =\r\n  | SeaportData\r\n  | FoundationData\r\n  | NFTXData\r\n  | LooksRareV2Data\r\n  | X2Y2Data\r\n  | CryptopunkData\r\n  | NFT20Data\r\n  | SudoswapData\r\n  | ElementData\r\n\r\nexport abstract class NFTTrade<T> implements Command {\r\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\r\n  readonly orders: T[]\r\n  readonly market: Market\r\n\r\n  constructor(market: Market, orders: T[]) {\r\n    invariant(orders.length > 0, 'no buy Items')\r\n    this.market = market\r\n    this.orders = orders\r\n  }\r\n\r\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\r\n\r\n  abstract getBuyItems(): BuyItem[]\r\n\r\n  // optional parameter for the markets that accept ERC20s not just ETH\r\n  abstract getTotalPrice(token?: string): BigNumber\r\n}\r\n\r\nexport type BuyItem = {\r\n  tokenAddress: string\r\n  tokenId: BigNumberish\r\n  tokenType: TokenType\r\n  amount?: BigNumberish // for 1155\r\n}\r\n\r\nexport enum Market {\r\n  Foundation = 'foundation',\r\n  LooksRareV2 = 'looksrareV2',\r\n  NFT20 = 'nft20',\r\n  NFTX = 'nftx',\r\n  Seaport = 'seaport',\r\n  Sudoswap = 'Sudoswap',\r\n  Cryptopunks = 'cryptopunks',\r\n  X2Y2 = 'x2y2',\r\n  Element = 'element',\r\n}\r\n\r\nexport enum TokenType {\r\n  ERC721 = 'ERC721',\r\n  ERC1155 = 'ERC1155',\r\n  Cryptopunk = 'Cryptopunk',\r\n}\r\n","import { defaultAbiCoder } from 'ethers/lib/utils'\r\n\r\n/**\r\n * CommandTypes\r\n * @description Flags that modify a command's execution\r\n * @enum {number}\r\n */\r\nexport enum CommandType {\r\n  V3_SWAP_EXACT_IN = 0x00,\r\n  V3_SWAP_EXACT_OUT = 0x01,\r\n  PERMIT2_TRANSFER_FROM = 0x02,\r\n  PERMIT2_PERMIT_BATCH = 0x03,\r\n  SWEEP = 0x04,\r\n  TRANSFER = 0x05,\r\n  PAY_PORTION = 0x06,\r\n\r\n  V2_SWAP_EXACT_IN = 0x08,\r\n  V2_SWAP_EXACT_OUT = 0x09,\r\n  PERMIT2_PERMIT = 0x0a,\r\n  WRAP_ETH = 0x0b,\r\n  UNWRAP_WETH = 0x0c,\r\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\r\n  BALANCE_CHECK_ERC20 = 0x0e,\r\n\r\n  // NFT-related command types\r\n  SEAPORT_V1_5 = 0x10,\r\n  LOOKS_RARE_V2 = 0x11,\r\n  NFTX = 0x12,\r\n  CRYPTOPUNKS = 0x13,\r\n  // 0x14\r\n  OWNER_CHECK_721 = 0x15,\r\n  OWNER_CHECK_1155 = 0x16,\r\n  SWEEP_ERC721 = 0x17,\r\n\r\n  X2Y2_721 = 0x18,\r\n  SUDOSWAP = 0x19,\r\n  NFT20 = 0x1a,\r\n  X2Y2_1155 = 0x1b,\r\n  FOUNDATION = 0x1c,\r\n  SWEEP_ERC1155 = 0x1d,\r\n  ELEMENT_MARKET = 0x1e,\r\n\r\n  SEAPORT_V1_4 = 0x20,\r\n  EXECUTE_SUB_PLAN = 0x21,\r\n  APPROVE_ERC20 = 0x22,\r\n}\r\n\r\nconst ALLOW_REVERT_FLAG = 0x80\r\n\r\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\r\n  CommandType.SEAPORT_V1_5,\r\n  CommandType.SEAPORT_V1_4,\r\n  CommandType.NFTX,\r\n  CommandType.LOOKS_RARE_V2,\r\n  CommandType.X2Y2_721,\r\n  CommandType.X2Y2_1155,\r\n  CommandType.FOUNDATION,\r\n  CommandType.SUDOSWAP,\r\n  CommandType.NFT20,\r\n  CommandType.EXECUTE_SUB_PLAN,\r\n  CommandType.CRYPTOPUNKS,\r\n  CommandType.ELEMENT_MARKET,\r\n])\r\n\r\nconst PERMIT_STRUCT =\r\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\r\n\r\nconst PERMIT_BATCH_STRUCT =\r\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\r\n\r\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\r\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\r\n\r\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\r\n  // Batch Reverts\r\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\r\n\r\n  // Permit2 Actions\r\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\r\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\r\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\r\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\r\n\r\n  // Uniswap Actions\r\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\r\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\r\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\r\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\r\n\r\n  // Token Actions and Checks\r\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\r\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\r\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\r\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\r\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\r\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\r\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\r\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\r\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\r\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\r\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\r\n\r\n  // NFT Markets\r\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\r\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\r\n  [CommandType.NFTX]: ['uint256', 'bytes'],\r\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\r\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\r\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\r\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\r\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\r\n  [CommandType.NFT20]: ['uint256', 'bytes'],\r\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\r\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\r\n}\r\n\r\nexport class RoutePlanner {\r\n  commands: string\r\n  inputs: string[]\r\n\r\n  constructor() {\r\n    this.commands = '0x'\r\n    this.inputs = []\r\n  }\r\n\r\n  addSubPlan(subplan: RoutePlanner): void {\r\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\r\n  }\r\n\r\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\r\n    let command = createCommand(type, parameters)\r\n    this.inputs.push(command.encodedInput)\r\n    if (allowRevert) {\r\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\r\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\r\n      }\r\n      command.type = command.type | ALLOW_REVERT_FLAG\r\n    }\r\n\r\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\r\n  }\r\n}\r\n\r\nexport type RouterCommand = {\r\n  type: CommandType\r\n  encodedInput: string\r\n}\r\n\r\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\r\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\r\n  return { type, encodedInput }\r\n}\r\n","import { BigNumber } from 'ethers'\r\n\r\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\r\n  switch (chainId) {\r\n    case 1: // mainnet\r\n      return '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD'\r\n    case 169: // manta\r\n        return '0x3fC944Ef0671249B3E6835eC6da01E2124610018'\r\n    case 3441005: // manta testnet\r\n        return '0x016835cDc0DD8043f96caEC2c5C075FF787fE0AD'\r\n    default:\r\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\r\n  }\r\n}\r\n\r\nexport const WETH_ADDRESS = (chainId: number): string => {\r\n  switch (chainId) {\r\n    case 1: //mainnet\r\n      return '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\r\n    case 169: // manta\r\n      return '0x0Dc808adcE2099A9F62AA87D9670745AbA741746'    \r\n    case 3441005: // manta testnet\r\n      return '0x226E0D9fBDE51708fC36Bb4E5d1af9728A285cF4'\r\n    default:\r\n      throw new Error(`WETH9 or UniversalRouter not deployed on chain ${chainId}`)\r\n  }\r\n}\r\n\r\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\r\n\r\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\r\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\r\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\r\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\r\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\r\n\r\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\r\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\r\n\r\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\r\nexport const SUDOSWAP_SPENDER_ID = 1\r\n","import JSBI from 'jsbi'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\r\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\r\nimport {\r\n  Trade as RouterTrade,\r\n  MixedRouteTrade,\r\n  Protocol,\r\n  IRoute,\r\n  RouteV2,\r\n  RouteV3,\r\n  MixedRouteSDK,\r\n  MixedRoute,\r\n  SwapOptions as RouterSwapOptions,\r\n  getOutputOfPools,\r\n  encodeMixedRouteToPath,\r\n  partitionMixedRouteByProtocol,\r\n} from '@uniswap/router-sdk'\r\nimport { Permit2Permit } from '../../utils/inputTokens'\r\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\r\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\r\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\r\n\r\n// the existing router permit object doesn't include enough data for permit2\r\n// so we extend swap options with the permit2 permit\r\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\r\n  inputTokenPermit?: Permit2Permit\r\n}\r\n\r\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\r\n\r\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\r\n  route: IRoute<TInput, TOutput, Pair | Pool>\r\n  inputAmount: CurrencyAmount<TInput>\r\n  outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\r\n// also translates trade objects from previous (v2, v3) SDKs\r\nexport class UniswapTrade implements Command {\r\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\r\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\r\n\r\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\r\n    let payerIsUser = true\r\n    if (this.trade.inputAmount.currency.isNative) {\r\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\r\n      planner.addCommand(CommandType.WRAP_ETH, [\r\n        ROUTER_AS_RECIPIENT,\r\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\r\n      ])\r\n      // since WETH is now owned by the router, the router pays for inputs\r\n      payerIsUser = false\r\n    }\r\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\r\n\r\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\r\n    //   1. when there are >2 exact input trades. this is only a heuristic,\r\n    //      as it's still more gas-expensive even in this case, but has benefits\r\n    //      in that the reversion probability is lower\r\n    const performAggregatedSlippageCheck =\r\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\r\n    const outputIsNative = this.trade.outputAmount.currency.isNative\r\n    const inputIsNative = this.trade.inputAmount.currency.isNative\r\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\r\n\r\n    for (const swap of this.trade.swaps) {\r\n      switch (swap.route.protocol) {\r\n        case Protocol.V2:\r\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\r\n          break\r\n        case Protocol.V3:\r\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\r\n          break\r\n        case Protocol.MIXED:\r\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\r\n          break\r\n        default:\r\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\r\n      }\r\n    }\r\n\r\n    if (routerMustCustody) {\r\n      if (outputIsNative) {\r\n        planner.addCommand(CommandType.UNWRAP_WETH, [\r\n          this.options.recipient,\r\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\r\n        ])\r\n      } else {\r\n        planner.addCommand(CommandType.SWEEP, [\r\n          this.trade.outputAmount.currency.wrapped.address,\r\n          this.options.recipient,\r\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\r\n        ])\r\n      }\r\n    }\r\n\r\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\r\n      // for exactOutput swaps that take native currency as input\r\n      // we need to send back the change to the user\r\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\r\n    }\r\n  }\r\n}\r\n\r\n// encode a uniswap v2 swap\r\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\r\n  planner: RoutePlanner,\r\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\r\n  tradeType: TradeType,\r\n  options: SwapOptions,\r\n  payerIsUser: boolean,\r\n  routerMustCustody: boolean\r\n): void {\r\n  const trade = new V2Trade(\r\n    route as RouteV2<TInput, TOutput>,\r\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\r\n    tradeType\r\n  )\r\n\r\n  if (tradeType == TradeType.EXACT_INPUT) {\r\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\r\n      // if native, we have to unwrap so keep in the router for now\r\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\r\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\r\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\r\n      route.path.map((pool) => pool.address),\r\n      payerIsUser,\r\n    ])\r\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\r\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\r\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\r\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\r\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\r\n      route.path.map((pool) => pool.address),\r\n      payerIsUser,\r\n    ])\r\n  }\r\n}\r\n\r\n// encode a uniswap v3 swap\r\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\r\n  planner: RoutePlanner,\r\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\r\n  tradeType: TradeType,\r\n  options: SwapOptions,\r\n  payerIsUser: boolean,\r\n  routerMustCustody: boolean\r\n): void {\r\n  const trade = V3Trade.createUncheckedTrade({\r\n    route: route as RouteV3<TInput, TOutput>,\r\n    inputAmount,\r\n    outputAmount,\r\n    tradeType,\r\n  })\r\n\r\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\r\n  if (tradeType == TradeType.EXACT_INPUT) {\r\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\r\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\r\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\r\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\r\n      path,\r\n      payerIsUser,\r\n    ])\r\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\r\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\r\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\r\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\r\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\r\n      path,\r\n      payerIsUser,\r\n    ])\r\n  }\r\n}\r\n\r\n// encode a mixed route swap, i.e. including both v2 and v3 pools\r\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\r\n  planner: RoutePlanner,\r\n  swap: Swap<TInput, TOutput>,\r\n  tradeType: TradeType,\r\n  options: SwapOptions,\r\n  payerIsUser: boolean,\r\n  routerMustCustody: boolean\r\n): void {\r\n  const { route, inputAmount, outputAmount } = swap\r\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\r\n\r\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\r\n  if (route.pools.length === 1) {\r\n    if (route.pools[0] instanceof Pool) {\r\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\r\n    } else if (route.pools[0] instanceof Pair) {\r\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\r\n    } else {\r\n      throw new Error('Invalid route type')\r\n    }\r\n  }\r\n\r\n  const trade = MixedRouteTrade.createUncheckedTrade({\r\n    route: route as MixedRoute<TInput, TOutput>,\r\n    inputAmount,\r\n    outputAmount,\r\n    tradeType,\r\n  })\r\n\r\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\r\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\r\n\r\n  // logic from\r\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\r\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\r\n  const isLastSectionInRoute = (i: number) => {\r\n    return i === sections.length - 1\r\n  }\r\n\r\n  let outputToken\r\n  let inputToken = route.input.wrapped\r\n\r\n  for (let i = 0; i < sections.length; i++) {\r\n    const section = sections[i]\r\n    /// Now, we get output of this section\r\n    outputToken = getOutputOfPools(section, inputToken)\r\n\r\n    const newRouteOriginal = new MixedRouteSDK(\r\n      [...section],\r\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\r\n      outputToken\r\n    )\r\n    const newRoute = new MixedRoute(newRouteOriginal)\r\n\r\n    /// Previous output is now input\r\n    inputToken = outputToken\r\n\r\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\r\n      return route.pools.every((pool) => pool instanceof Pool)\r\n    }\r\n\r\n    if (mixedRouteIsAllV3(newRoute)) {\r\n      const path: string = encodeMixedRouteToPath(newRoute)\r\n\r\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\r\n        // if not last section: send tokens directly to the first v2 pair of the next section\r\n        // note: because of the partitioning function we can be sure that the next section is v2\r\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\r\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\r\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\r\n        path, // path\r\n        payerIsUser && i === 0, // payerIsUser\r\n      ])\r\n    } else {\r\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\r\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\r\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\r\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\r\n        newRoute.path.map((pool) => pool.address), // path\r\n        payerIsUser && i === 0,\r\n      ])\r\n    }\r\n  }\r\n}\r\n\r\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\r\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\r\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { ethers } from 'ethers'\r\nimport { PermitSingle } from '@uniswap/permit2-sdk'\r\nimport { CommandType, RoutePlanner } from './routerCommands'\r\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\r\n\r\nexport interface Permit2Permit extends PermitSingle {\r\n  signature: string\r\n}\r\n\r\nexport type ApproveProtocol = {\r\n  token: string\r\n  protocol: string\r\n}\r\n\r\nexport type Permit2TransferFrom = {\r\n  token: string\r\n  amount: string\r\n  recipient?: string\r\n}\r\n\r\nexport type InputTokenOptions = {\r\n  approval?: ApproveProtocol\r\n  permit2Permit?: Permit2Permit\r\n  permit2TransferFrom?: Permit2TransferFrom\r\n}\r\n\r\nconst SIGNATURE_LENGTH = 65\r\nconst EIP_2098_SIGNATURE_LENGTH = 64\r\n\r\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\r\n  let signature = permit2.signature\r\n\r\n  const length = ethers.utils.arrayify(permit2.signature).length\r\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\r\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\r\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\r\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\r\n  }\r\n\r\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\r\n}\r\n\r\n// Handles the encoding of commands needed to gather input tokens for a trade\r\n// Approval: The router approving another address to take tokens.\r\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\r\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\r\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\r\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\r\n  // first ensure that all tokens provided for encoding are the same\r\n  if (!!options.approval && !!options.permit2Permit)\r\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\r\n  if (!!options.approval && !!options.permit2TransferFrom)\r\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\r\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\r\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\r\n\r\n  // if an options.approval is required, add it\r\n  if (!!options.approval) {\r\n    planner.addCommand(CommandType.APPROVE_ERC20, [\r\n      options.approval.token,\r\n      mapApprovalProtocol(options.approval.protocol),\r\n    ])\r\n  }\r\n\r\n  // if this order has a options.permit2Permit, encode it\r\n  if (!!options.permit2Permit) {\r\n    encodePermit(planner, options.permit2Permit)\r\n  }\r\n\r\n  if (!!options.permit2TransferFrom) {\r\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\r\n      options.permit2TransferFrom.token,\r\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\r\n      options.permit2TransferFrom.amount,\r\n    ])\r\n  }\r\n}\r\n\r\nfunction mapApprovalProtocol(protocolAddress: string): number {\r\n  switch (protocolAddress.toLowerCase()) {\r\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\r\n      return OPENSEA_CONDUIT_SPENDER_ID\r\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\r\n      return OPENSEA_CONDUIT_SPENDER_ID\r\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\r\n      return SUDOSWAP_SPENDER_ID\r\n    default:\r\n      throw new Error('unsupported protocol address')\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\nimport { MethodParameters } from '@uniswap/v3-sdk'\r\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\r\nimport { Currency, TradeType } from '@uniswap/sdk-core'\r\nimport { Command, RouterTradeType } from './entities/Command'\r\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\r\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\r\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\r\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\r\nimport { encodePermit } from './utils/inputTokens'\r\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\r\nimport { SeaportTrade } from './entities'\r\n\r\nexport type SwapRouterConfig = {\r\n  sender?: string // address\r\n  deadline?: BigNumberish\r\n}\r\n\r\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\r\n\r\nexport abstract class SwapRouter {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\r\n    if (!Array.isArray(trades)) trades = [trades]\r\n\r\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\r\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\r\n    const planner = new RoutePlanner()\r\n\r\n    // track value flow to require the right amount of native value\r\n    let currentNativeValueInRouter = BigNumber.from(0)\r\n    let transactionValue = BigNumber.from(0)\r\n\r\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\r\n    let nftInputTokens = new Set<string>()\r\n\r\n    for (const trade of trades) {\r\n      /**\r\n       * is NFTTrade\r\n       */\r\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\r\n        const nftTrade = trade as SupportedNFTTrade\r\n        nftTrade.encode(planner, { allowRevert })\r\n        const tradePrice = nftTrade.getTotalPrice()\r\n\r\n        if (nftTrade.market == Market.Seaport) {\r\n          const seaportTrade = nftTrade as SeaportTrade\r\n          const seaportInputTokens = seaportTrade.getInputTokens()\r\n          seaportInputTokens.forEach((inputToken) => {\r\n            nftInputTokens.add(inputToken)\r\n          })\r\n        } else {\r\n          nftInputTokens.add(ETH_ADDRESS)\r\n        }\r\n\r\n        // send enough native value to contract for NFT purchase\r\n        if (currentNativeValueInRouter.lt(tradePrice)) {\r\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\r\n          currentNativeValueInRouter = BigNumber.from(0)\r\n        } else {\r\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\r\n        }\r\n        /**\r\n         * is UniswapTrade\r\n         */\r\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\r\n        const uniswapTrade = trade as UniswapTrade\r\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\r\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\r\n        const swapOptions = uniswapTrade.options\r\n\r\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\r\n\r\n        if (!!swapOptions.inputTokenPermit) {\r\n          encodePermit(planner, swapOptions.inputTokenPermit)\r\n        }\r\n\r\n        if (inputIsNative) {\r\n          transactionValue = transactionValue.add(\r\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\r\n          )\r\n        }\r\n        // track amount of native currency in the router\r\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\r\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\r\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\r\n          )\r\n        }\r\n        uniswapTrade.encode(planner, { allowRevert: false })\r\n        /**\r\n         * is UnwrapWETH\r\n         */\r\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\r\n        const UnwrapWETH = trade as UnwrapWETH\r\n        trade.encode(planner, { allowRevert: false })\r\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\r\n        /**\r\n         * else\r\n         */\r\n      } else {\r\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\r\n      }\r\n    }\r\n\r\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\r\n    // or NFT trades with potential slippage (i.e. sudo).\r\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\r\n    nftInputTokens.forEach((inputToken) => {\r\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\r\n    })\r\n    return SwapRouter.encodePlan(planner, transactionValue, config)\r\n  }\r\n\r\n  /**\r\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\r\n   * This version does not work correctly for Seaport ERC20->NFT purchases\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\r\n   * @param trades to produce call parameters for\r\n   */\r\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\r\n    let planner = new RoutePlanner()\r\n    let totalPrice = BigNumber.from(0)\r\n\r\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\r\n\r\n    for (const trade of trades) {\r\n      trade.encode(planner, { allowRevert })\r\n      totalPrice = totalPrice.add(trade.getTotalPrice())\r\n    }\r\n\r\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\r\n    return SwapRouter.encodePlan(planner, totalPrice, config)\r\n  }\r\n\r\n  /**\r\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trades to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapERC20CallParameters(\r\n    trades: RouterTrade<Currency, Currency, TradeType>,\r\n    options: SwapOptions\r\n  ): MethodParameters {\r\n    // TODO: use permit if signature included in swapOptions\r\n    const planner = new RoutePlanner()\r\n\r\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\r\n\r\n    const inputCurrency = trade.trade.inputAmount.currency\r\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\r\n\r\n    if (options.inputTokenPermit) {\r\n      encodePermit(planner, options.inputTokenPermit)\r\n    }\r\n\r\n    const nativeCurrencyValue = inputCurrency.isNative\r\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\r\n      : BigNumber.from(0)\r\n\r\n    trade.encode(planner, { allowRevert: false })\r\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\r\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Encodes a planned route into a method name and parameters for the Router contract.\r\n   * @param planner the planned route\r\n   * @param nativeCurrencyValue the native currency value of the planned route\r\n   * @param config the router config\r\n   */\r\n  private static encodePlan(\r\n    planner: RoutePlanner,\r\n    nativeCurrencyValue: BigNumber,\r\n    config: SwapRouterConfig = {}\r\n  ): MethodParameters {\r\n    const { commands, inputs } = planner\r\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\r\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\r\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\r\n    return { calldata, value: nativeCurrencyValue.toHexString() }\r\n  }\r\n}\r\n","import { TradeConfig } from '../Command'\r\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\nexport type CryptopunkData = {\r\n  tokenId: BigNumberish\r\n  recipient: string\r\n  value: BigNumberish\r\n}\r\n\r\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\r\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\r\n\r\n  constructor(orders: CryptopunkData[]) {\r\n    super(Market.Cryptopunks, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const item of this.orders) {\r\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const item of this.orders) {\r\n      buyItems.push({\r\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\r\n        tokenId: item.tokenId,\r\n        tokenType: TokenType.Cryptopunk,\r\n      })\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.value)\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import abi from '../../../abis/Foundation.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\nexport type FoundationData = {\r\n  recipient: string\r\n  tokenAddress: string\r\n  tokenId: BigNumberish\r\n  price: BigNumberish\r\n  referrer: string // address\r\n}\r\n\r\nexport class FoundationTrade extends NFTTrade<FoundationData> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  constructor(orders: FoundationData[]) {\r\n    super(Market.Foundation, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const item of this.orders) {\r\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\r\n        item.tokenAddress,\r\n        item.tokenId,\r\n        item.price,\r\n        item.referrer,\r\n      ])\r\n      planner.addCommand(\r\n        CommandType.FOUNDATION,\r\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\r\n        config.allowRevert\r\n      )\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const item of this.orders) {\r\n      buyItems.push({\r\n        tokenAddress: item.tokenAddress,\r\n        tokenId: item.tokenId,\r\n        tokenType: TokenType.ERC721,\r\n      })\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.price)\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import abi from '../../../abis/LooksRareV2.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber } from 'ethers'\r\nimport { ZERO_ADDRESS } from '../../utils/constants'\r\n\r\nexport type MakerOrder = {\r\n  quoteType: number\r\n  globalNonce: string\r\n  subsetNonce: string\r\n  orderNonce: string\r\n  strategyId: number\r\n  collectionType: number\r\n  collection: string\r\n  currency: string\r\n  signer: string\r\n  startTime: number\r\n  endTime: number\r\n  price: string\r\n  itemIds: string[]\r\n  amounts: string[]\r\n  additionalParameters: string\r\n}\r\n\r\nexport type TakerOrder = {\r\n  recipient: string\r\n  additionalParameters: string\r\n}\r\n\r\nexport type MerkleProof = {\r\n  value: string\r\n  position: number\r\n}\r\n\r\nexport type MerkleTree = {\r\n  root: string\r\n  proof: MerkleProof[]\r\n}\r\n\r\nexport type LRV2APIOrder = MakerOrder & {\r\n  id: string\r\n  hash: string\r\n  signature: string\r\n  createdAt: string\r\n  merkleRoot?: string\r\n  merkleProof?: MerkleProof[]\r\n  status: string\r\n}\r\n\r\nexport type LooksRareV2Data = {\r\n  apiOrder: LRV2APIOrder\r\n  taker: string\r\n}\r\n\r\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n  private static ERC721_ORDER = 0\r\n\r\n  constructor(orders: LooksRareV2Data[]) {\r\n    super(Market.LooksRareV2, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\r\n\r\n    let calldata\r\n    if (this.orders.length == 1) {\r\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\r\n        takerBids[0],\r\n        makerOrders[0],\r\n        makerSignatures[0],\r\n        merkleTrees[0],\r\n        ZERO_ADDRESS, // affiliate\r\n      ])\r\n    } else {\r\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\r\n        takerBids,\r\n        makerOrders,\r\n        makerSignatures,\r\n        merkleTrees,\r\n        ZERO_ADDRESS, // affiliate\r\n        false, // isAtomic (we deal with this in allowRevert)\r\n      ])\r\n    }\r\n\r\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const item of this.orders) {\r\n      const tokenAddress = item.apiOrder.collection\r\n      const tokenType =\r\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\r\n      for (const tokenId of item.apiOrder.itemIds)\r\n        buyItems.push({\r\n          tokenAddress,\r\n          tokenId,\r\n          tokenType,\r\n        })\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.apiOrder.price)\r\n    }\r\n    return total\r\n  }\r\n\r\n  private refactorAPIData(orders: LooksRareV2Data[]): {\r\n    takerBids: TakerOrder[]\r\n    makerOrders: MakerOrder[]\r\n    makerSignatures: string[]\r\n    totalValue: BigNumber\r\n    merkleTrees: MerkleTree[]\r\n  } {\r\n    let takerBids: TakerOrder[] = []\r\n    let makerOrders: MakerOrder[] = []\r\n    let makerSignatures: string[] = []\r\n    let totalValue: BigNumber = BigNumber.from(0)\r\n    let merkleTrees: MerkleTree[] = []\r\n\r\n    orders.forEach((order) => {\r\n      makerOrders.push({ ...order.apiOrder })\r\n\r\n      makerSignatures.push(order.apiOrder.signature)\r\n\r\n      takerBids.push({\r\n        recipient: order.taker,\r\n        additionalParameters: '0x',\r\n      })\r\n\r\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\r\n\r\n      merkleTrees.push({\r\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n        proof: order.apiOrder.merkleProof ?? [],\r\n      })\r\n    })\r\n\r\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\r\n  }\r\n}\r\n","import abi from '../../../abis/NFT20.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { TradeConfig } from '../Command'\r\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\nexport type NFT20Data = {\r\n  tokenAddress: string\r\n  tokenIds: BigNumberish[]\r\n  tokenAmounts: BigNumberish[]\r\n  recipient: string\r\n  fee: BigNumberish\r\n  isV3: boolean\r\n  value: BigNumberish\r\n}\r\n\r\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  constructor(orders: NFT20Data[]) {\r\n    super(Market.NFT20, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const order of this.orders) {\r\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\r\n        order.tokenAddress,\r\n        order.tokenIds,\r\n        order.tokenAmounts,\r\n        order.recipient,\r\n        order.fee,\r\n        order.isV3,\r\n      ])\r\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const pool of this.orders) {\r\n      for (const tokenId of pool.tokenIds) {\r\n        buyItems.push({\r\n          tokenAddress: pool.tokenAddress,\r\n          tokenId: tokenId,\r\n          tokenType: TokenType.ERC721,\r\n        })\r\n      }\r\n    }\r\n\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.value)\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import abi from '../../../abis/NFTXZap.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\nexport type NFTXData = {\r\n  recipient: string\r\n  vaultId: BigNumberish\r\n  tokenAddress: string\r\n  tokenIds: BigNumberish[]\r\n  value: BigNumber\r\n  swapCalldata: string\r\n}\r\n\r\nexport class NFTXTrade extends NFTTrade<NFTXData> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  constructor(orders: NFTXData[]) {\r\n    super(Market.NFTX, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const order of this.orders) {\r\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\r\n        order.vaultId,\r\n        order.tokenIds.length,\r\n        order.tokenIds,\r\n        order.swapCalldata,\r\n        order.recipient,\r\n      ])\r\n\r\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const order of this.orders) {\r\n      for (const tokenId of order.tokenIds) {\r\n        buyItems.push({\r\n          tokenAddress: order.tokenAddress,\r\n          tokenId: tokenId,\r\n          tokenType: TokenType.ERC721,\r\n        })\r\n      }\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.value)\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import { BigNumber, BigNumberish } from 'ethers'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport abi from '../../../abis/Seaport.json'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\r\nimport { ETH_ADDRESS } from '../../utils/constants'\r\n\r\nexport type SeaportData = {\r\n  items: Order[]\r\n  recipient: string // address\r\n  protocolAddress: string\r\n  inputTokenProcessing?: InputTokenProcessing[]\r\n}\r\n\r\nexport type InputTokenProcessing = {\r\n  token: string\r\n  permit2Permit?: Permit2Permit\r\n  protocolApproval: boolean\r\n  permit2TransferFrom: boolean\r\n}\r\n\r\nexport type FulfillmentComponent = {\r\n  orderIndex: BigNumberish\r\n  itemIndex: BigNumberish\r\n}\r\n\r\nexport type OfferItem = {\r\n  itemType: BigNumberish // enum\r\n  token: string // address\r\n  identifierOrCriteria: BigNumberish\r\n  startAmount: BigNumberish\r\n  endAmount: BigNumberish\r\n}\r\n\r\nexport type ConsiderationItem = OfferItem & {\r\n  recipient: string\r\n}\r\n\r\nexport type Order = {\r\n  parameters: OrderParameters\r\n  signature: string\r\n}\r\n\r\ntype OrderParameters = {\r\n  offerer: string // address,\r\n  offer: OfferItem[]\r\n  consideration: ConsiderationItem[]\r\n  orderType: BigNumberish // enum\r\n  startTime: BigNumberish\r\n  endTime: BigNumberish\r\n  zoneHash: string // bytes32\r\n  zone: string // address\r\n  salt: BigNumberish\r\n  conduitKey: string // bytes32,\r\n  totalOriginalConsiderationItems: BigNumberish\r\n}\r\n\r\nexport type AdvancedOrder = Order & {\r\n  numerator: BigNumber // uint120\r\n  denominator: BigNumber // uint120\r\n  extraData: string // bytes\r\n}\r\n\r\nexport class SeaportTrade extends NFTTrade<SeaportData> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\r\n\r\n  constructor(orders: SeaportData[]) {\r\n    super(Market.Seaport, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const order of this.orders) {\r\n      let advancedOrders: AdvancedOrder[] = []\r\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\r\n        { orderIndex: index, itemIndex: 0 },\r\n      ])\r\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\r\n\r\n      for (const item of order.items) {\r\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\r\n        advancedOrders.push(advancedOrder)\r\n      }\r\n\r\n      let calldata: string\r\n      if (advancedOrders.length == 1) {\r\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\r\n          advancedOrders[0],\r\n          [],\r\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\r\n          order.recipient,\r\n        ])\r\n      } else {\r\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\r\n          advancedOrders,\r\n          [],\r\n          orderFulfillments,\r\n          considerationFulFillments,\r\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\r\n          order.recipient,\r\n          100, // TODO: look into making this a better number\r\n        ])\r\n      }\r\n\r\n      if (!!order.inputTokenProcessing) {\r\n        for (const inputToken of order.inputTokenProcessing)\r\n          encodeInputTokenOptions(planner, {\r\n            approval: inputToken.protocolApproval\r\n              ? { token: inputToken.token, protocol: order.protocolAddress }\r\n              : undefined,\r\n            permit2Permit: inputToken.permit2Permit,\r\n            permit2TransferFrom: inputToken.permit2TransferFrom\r\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\r\n              : undefined,\r\n          })\r\n      }\r\n\r\n      planner.addCommand(\r\n        this.commandMap(order.protocolAddress),\r\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\r\n        config.allowRevert\r\n      )\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const order of this.orders) {\r\n      for (const item of order.items) {\r\n        for (const offer of item.parameters.offer) {\r\n          buyItems.push({\r\n            tokenAddress: offer.token,\r\n            tokenId: offer.identifierOrCriteria,\r\n            tokenType: TokenType.ERC721,\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getInputTokens(): Set<string> {\r\n    let inputTokens = new Set<string>()\r\n    for (const order of this.orders) {\r\n      for (const item of order.items) {\r\n        for (const consideration of item.parameters.consideration) {\r\n          const token = consideration.token.toLowerCase()\r\n          inputTokens.add(token)\r\n        }\r\n      }\r\n    }\r\n    return inputTokens\r\n  }\r\n\r\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\r\n    let totalOrderPrice = BigNumber.from(0)\r\n    for (const item of order.items) {\r\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\r\n    }\r\n    return totalOrderPrice\r\n  }\r\n\r\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\r\n    let totalPrice = BigNumber.from(0)\r\n    for (const order of this.orders) {\r\n      for (const item of order.items) {\r\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\r\n      }\r\n    }\r\n    return totalPrice\r\n  }\r\n\r\n  private commandMap(protocolAddress: string): CommandType {\r\n    switch (protocolAddress.toLowerCase()) {\r\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\r\n        return CommandType.SEAPORT_V1_5\r\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\r\n        return CommandType.SEAPORT_V1_4\r\n      default:\r\n        throw new Error('unsupported Seaport address')\r\n    }\r\n  }\r\n\r\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\r\n    let considerationFulfillments: FulfillmentComponent[][] = []\r\n    const considerationRecipients: string[] = []\r\n\r\n    for (const i in protocolDatas) {\r\n      const protocolData = protocolDatas[i]\r\n\r\n      for (const j in protocolData.parameters.consideration) {\r\n        const item = protocolData.parameters.consideration[j]\r\n\r\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\r\n          considerationRecipients.push(item.recipient)\r\n        }\r\n\r\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\r\n\r\n        if (!considerationFulfillments[recipientIndex]) {\r\n          considerationFulfillments.push([\r\n            {\r\n              orderIndex: i,\r\n              itemIndex: j,\r\n            },\r\n          ])\r\n        } else {\r\n          considerationFulfillments[recipientIndex].push({\r\n            orderIndex: i,\r\n            itemIndex: j,\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return considerationFulfillments\r\n  }\r\n\r\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\r\n    const advancedOrder = {\r\n      parameters: data.parameters,\r\n      numerator: BigNumber.from('1'),\r\n      denominator: BigNumber.from('1'),\r\n      signature: data.signature,\r\n      extraData: '0x00',\r\n    }\r\n    return { advancedOrder }\r\n  }\r\n\r\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\r\n    return considerations.reduce(\r\n      (amt: BigNumber, consideration: ConsiderationItem) =>\r\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\r\n      BigNumber.from(0)\r\n    )\r\n  }\r\n}\r\n","import abi from '../../../abis/Sudoswap.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\ntype PairSwap = {\r\n  swapInfo: {\r\n    pair: string // address\r\n    nftIds: BigNumberish[]\r\n  }\r\n  tokenAddress: string // address\r\n  maxCost: BigNumberish\r\n}\r\n\r\nexport type SudoswapData = {\r\n  swaps: PairSwap[]\r\n  nftRecipient: string\r\n  ethRecipient: string\r\n  deadline: BigNumberish\r\n}\r\n\r\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  constructor(orders: SudoswapData[]) {\r\n    super(Market.Sudoswap, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const order of this.orders) {\r\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\r\n        order.swaps.map((swap) => {\r\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\r\n        }),\r\n        order.ethRecipient,\r\n        order.nftRecipient,\r\n        order.deadline,\r\n      ])\r\n      const value = order.swaps.reduce((prevVal, swap) => {\r\n        return prevVal.add(swap.maxCost)\r\n      }, BigNumber.from(0))\r\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const order of this.orders) {\r\n      for (const swap of order.swaps) {\r\n        for (const tokenId of swap.swapInfo.nftIds) {\r\n          buyItems.push({\r\n            tokenAddress: swap.tokenAddress,\r\n            tokenId,\r\n            tokenType: TokenType.ERC721,\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const order of this.orders) {\r\n      for (const swap of order.swaps) {\r\n        total = total.add(swap.maxCost)\r\n      }\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import abi from '../../../abis/X2Y2.json'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\r\nimport { TradeConfig } from '../Command'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { BigNumber, BigNumberish } from 'ethers'\r\n\r\ntype X2Y2PartialData = {\r\n  signedInput: string\r\n  recipient: string\r\n  tokenAddress: string\r\n  tokenId: BigNumberish\r\n  price: BigNumberish\r\n}\r\n\r\nexport type X2Y2_721_Data = X2Y2PartialData & {\r\n  tokenType: TokenType.ERC721\r\n}\r\n\r\nexport type X2Y2_1155_Data = X2Y2PartialData & {\r\n  tokenType: TokenType.ERC1155\r\n  tokenAmount: BigNumberish\r\n}\r\n\r\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\r\n\r\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  constructor(orders: X2Y2Data[]) {\r\n    super(Market.X2Y2, orders)\r\n  }\r\n\r\n  encode(planner: RoutePlanner, config: TradeConfig): void {\r\n    for (const item of this.orders) {\r\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\r\n      const calldata = functionSelector + item.signedInput.slice(2)\r\n\r\n      if (item.tokenType == TokenType.ERC721) {\r\n        planner.addCommand(\r\n          CommandType.X2Y2_721,\r\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\r\n          config.allowRevert\r\n        )\r\n      } else if (item.tokenType == TokenType.ERC1155) {\r\n        planner.addCommand(\r\n          CommandType.X2Y2_1155,\r\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\r\n          config.allowRevert\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  getBuyItems(): BuyItem[] {\r\n    let buyItems: BuyItem[] = []\r\n    for (const item of this.orders) {\r\n      buyItems.push({\r\n        tokenAddress: item.tokenAddress,\r\n        tokenId: item.tokenId,\r\n        tokenType: item.tokenType,\r\n      })\r\n    }\r\n    return buyItems\r\n  }\r\n\r\n  getTotalPrice(): BigNumber {\r\n    let total = BigNumber.from(0)\r\n    for (const item of this.orders) {\r\n      total = total.add(item.price)\r\n    }\r\n    return total\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport { BigNumberish } from 'ethers'\r\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\r\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\r\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\r\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\r\n\r\nexport class UnwrapWETH implements Command {\r\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\r\n  readonly permit2Data: Permit2Permit\r\n  readonly wethAddress: string\r\n  readonly amount: BigNumberish\r\n\r\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\r\n    this.wethAddress = WETH_ADDRESS(chainId)\r\n    this.amount = amount\r\n\r\n    if (!!permit2) {\r\n      invariant(\r\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\r\n        `must be permitting WETH address: ${this.wethAddress}`\r\n      )\r\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\r\n      this.permit2Data = permit2\r\n    }\r\n  }\r\n\r\n  encode(planner: RoutePlanner, _: TradeConfig): void {\r\n    encodeInputTokenOptions(planner, {\r\n      permit2Permit: this.permit2Data,\r\n      permit2TransferFrom: {\r\n        token: this.wethAddress,\r\n        amount: this.amount.toString(),\r\n      },\r\n    })\r\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\r\n  }\r\n}\r\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","priceImpact","greaterThan","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","lt","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}