"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpError = exports.parseErrorOptions = exports.getStatusCode = void 0;
/**
 * Returns the value if it is a number between 100 and 599.
 * Otherwise returns undefined.
 * Supports strings containing numbers.
 *
 * @param {any} value
 * @returns {(number|undefined)}
 */
const getStatusCode = (value) => {
    let returnValue;
    if (typeof value === 'string' || typeof value === 'number') {
        const strValue = `${value}`.trim();
        if (strValue.length === 3) {
            const numValue = parseInt(strValue, 10);
            if (numValue && isNumber(numValue) && numValue >= 100 && numValue <= 599) {
                returnValue = numValue;
            }
        }
    }
    return returnValue;
};
exports.getStatusCode = getStatusCode;
/**
 * Returns HttpError options parsed from the provided parameters
 *
 * @param errorOptions
 * @returns HttpErrorOptions
 */
const parseErrorOptions = (...errorOptions) => {
    let options = {};
    errorOptions.map(opt => {
        if (opt) {
            if (typeof opt === 'string' || typeof opt === 'number') {
                const statusCode = exports.getStatusCode(opt);
                if (statusCode) {
                    options.statusCode = statusCode;
                }
                else if (typeof opt === 'string') {
                    options.message = opt;
                }
            }
            else if (opt instanceof Error || hasKeys(opt)) {
                options = Object.assign(Object.assign({}, options), getErrorProperties(opt));
            }
        }
    });
    return options;
};
exports.parseErrorOptions = parseErrorOptions;
/**
 * The HttpError class extends the Error object, providing Http status
 * code and message detail. Pass it an HttpErrorOptions object, a status
 * code, an error message, or an Error object.
 *
 * @export
 * @class HttpError
 * @extends {Error}
 */
class HttpError extends Error {
    constructor(...errorOptions) {
        super();
        this.isHttpError = true;
        this.statusCode = DEFAULT_STATUS_CODE;
        this.title = DEFAULT_REASON_CODE;
        this.message = DEFAULT_ERROR_MESSAGE;
        Object.assign(this, exports.parseErrorOptions(...errorOptions));
        if (!this.body && this.statusCode < 500) {
            this.body = {
                // eslint-disable-next-line camelcase
                error_text: this.message || DEFAULT_ERROR_MESSAGE,
            };
        }
    }
    get status() {
        return this.statusCode;
    }
}
exports.HttpError = HttpError;
/**
 * Extracts HttpErrorOptions properties from obj
 *
 * @param obj
 */
const getErrorProperties = (obj) => {
    const returnObj = {};
    if ((isObj(obj) && hasKeys(obj)) || isErr(obj)) {
        const { name, title, message, detail, stack, type, statusCode, body, } = obj;
        if (isString(name)) {
            returnObj.name = name;
        }
        if (isString(title)) {
            returnObj.title = title;
        }
        if (isString(message)) {
            returnObj.message = message;
        }
        if (isString(detail)) {
            returnObj.detail = detail;
        }
        if (isString(stack)) {
            returnObj.stack = stack;
        }
        if (isString(type)) {
            returnObj.type = type;
        }
        if (statusCode && isNumber(statusCode)) {
            returnObj.statusCode = statusCode;
        }
        if (body && (isString(body) || isObj(body))) {
            returnObj.body = body;
        }
    }
    return returnObj;
};
/**
 * Returns true if obj is null or undefined
 *
 * @param obj
 */
const isNil = (obj) => {
    return null === obj || typeof obj === 'undefined';
};
/**
 * Returns true if obj is a string
 *
 * @param obj
 */
const isString = (obj) => {
    return typeof obj === 'string';
};
/**
 * Returns true if obj is a plain object, but is not null or undefined
 *
 * @param obj
 */
const isObj = (obj) => {
    return !isNil(obj) && Object.prototype.toString.call(obj) === '[object Object]';
};
/**
 * Returns true if obj is an Error instance
 *
 * @param obj
 */
const isErr = (obj) => {
    return obj instanceof Error;
};
/**
 * Returns true if obj is a number, but not NaN
 *
 * @param obj
 */
const isNumber = (obj) => {
    return typeof obj === 'number' && !isNaN(obj);
};
/**
 * Returns true if obj has at least one of it's own keys
 *
 * @param {any} obj
 * @returns {boolean}
 */
const hasKeys = (obj) => {
    let keyCount = 0;
    try {
        keyCount = Object.keys(obj).length;
    }
    catch (_er) { }
    return keyCount > 0;
};
const DEFAULT_STATUS_CODE = 500;
const DEFAULT_REASON_CODE = 'Internal Server Error';
// eslint-disable-line max-len
const DEFAULT_ERROR_MESSAGE = 'The server encountered an unexpected condition that prevented it from fulfilling the request';
//# sourceMappingURL=HttpError.js.map