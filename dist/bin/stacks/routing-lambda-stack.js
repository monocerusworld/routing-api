import * as cdk from 'aws-cdk-lib';
import { Duration } from 'aws-cdk-lib';
import * as asg from 'aws-cdk-lib/aws-applicationautoscaling';
import * as aws_cloudwatch from 'aws-cdk-lib/aws-cloudwatch';
import * as aws_cloudwatch_actions from 'aws-cdk-lib/aws-cloudwatch-actions';
import * as aws_iam from 'aws-cdk-lib/aws-iam';
import * as aws_lambda from 'aws-cdk-lib/aws-lambda';
import * as aws_lambda_nodejs from 'aws-cdk-lib/aws-lambda-nodejs';
import * as aws_sns from 'aws-cdk-lib/aws-sns';
import * as path from 'path';
export class RoutingLambdaStack extends cdk.NestedStack {
    constructor(scope, name, props) {
        var _a, _b;
        super(scope, name, props);
        const { poolCacheBucket, poolCacheBucket2, poolCacheKey, jsonRpcProviders, tokenListCacheBucket, provisionedConcurrency, ethGasStationInfoUrl, chatbotSNSArn, tenderlyUser, tenderlyProject, tenderlyAccessKey, cachedRoutesDynamoDb, } = props;
        const lambdaRole = new aws_iam.Role(this, 'RoutingLambdaRole', {
            assumedBy: new aws_iam.ServicePrincipal('lambda.amazonaws.com'),
            managedPolicies: [
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchLambdaInsightsExecutionRolePolicy'),
                aws_iam.ManagedPolicy.fromAwsManagedPolicyName('AWSXRayDaemonWriteAccess'),
            ],
        });
        poolCacheBucket.grantRead(lambdaRole);
        poolCacheBucket2.grantRead(lambdaRole);
        tokenListCacheBucket.grantRead(lambdaRole);
        cachedRoutesDynamoDb === null || cachedRoutesDynamoDb === void 0 ? void 0 : cachedRoutesDynamoDb.grantReadWriteData(lambdaRole);
        const region = cdk.Stack.of(this).region;
        this.routingLambda = new aws_lambda_nodejs.NodejsFunction(this, 'RoutingLambda2', {
            role: lambdaRole,
            runtime: aws_lambda.Runtime.NODEJS_14_X,
            entry: path.join(__dirname, '../../lib/handlers/index.ts'),
            handler: 'quoteHandler',
            timeout: cdk.Duration.seconds(29),
            memorySize: 1024,
            bundling: {
                minify: true,
                sourceMap: true,
            },
            description: 'Routing Lambda',
            environment: {
                VERSION: '5',
                NODE_OPTIONS: '--enable-source-maps',
                POOL_CACHE_BUCKET: poolCacheBucket.bucketName,
                POOL_CACHE_BUCKET_2: poolCacheBucket2.bucketName,
                POOL_CACHE_KEY: poolCacheKey,
                TOKEN_LIST_CACHE_BUCKET: tokenListCacheBucket.bucketName,
                ETH_GAS_STATION_INFO_URL: ethGasStationInfoUrl,
                TENDERLY_USER: tenderlyUser,
                TENDERLY_PROJECT: tenderlyProject,
                TENDERLY_ACCESS_KEY: tenderlyAccessKey,
                CACHED_ROUTES_TABLE_NAME: (_a = cachedRoutesDynamoDb === null || cachedRoutesDynamoDb === void 0 ? void 0 : cachedRoutesDynamoDb.tableName) !== null && _a !== void 0 ? _a : '',
                ...jsonRpcProviders,
            },
            layers: [
                aws_lambda.LayerVersion.fromLayerVersionArn(this, 'InsightsLayer', `arn:aws:lambda:${region}:580247275435:layer:LambdaInsightsExtension:14`),
            ],
            tracing: aws_lambda.Tracing.ACTIVE,
        });
        this.routeToRatioLambda = new aws_lambda_nodejs.NodejsFunction(this, 'RouteToRatioLambda2', {
            role: lambdaRole,
            runtime: aws_lambda.Runtime.NODEJS_14_X,
            entry: path.join(__dirname, '../../lib/handlers/index.ts'),
            handler: 'quoteToRatioHandler',
            timeout: cdk.Duration.seconds(29),
            memorySize: 1024,
            bundling: {
                minify: true,
                sourceMap: true,
            },
            description: 'Route to Ratio Lambda',
            environment: {
                VERSION: '4',
                NODE_OPTIONS: '--enable-source-maps',
                POOL_CACHE_BUCKET: poolCacheBucket.bucketName,
                POOL_CACHE_BUCKET_2: poolCacheBucket2.bucketName,
                POOL_CACHE_KEY: poolCacheKey,
                TOKEN_LIST_CACHE_BUCKET: tokenListCacheBucket.bucketName,
                ETH_GAS_STATION_INFO_URL: ethGasStationInfoUrl,
                CACHED_ROUTES_TABLE_NAME: (_b = cachedRoutesDynamoDb === null || cachedRoutesDynamoDb === void 0 ? void 0 : cachedRoutesDynamoDb.tableName) !== null && _b !== void 0 ? _b : '',
                ...jsonRpcProviders,
            },
            layers: [
                aws_lambda.LayerVersion.fromLayerVersionArn(this, 'InsightsLayerSwapAndAdd', `arn:aws:lambda:${region}:580247275435:layer:LambdaInsightsExtension:14`),
            ],
            tracing: aws_lambda.Tracing.ACTIVE,
        });
        const lambdaAlarmErrorRate = new aws_cloudwatch.Alarm(this, 'RoutingAPI-LambdaErrorRate', {
            metric: new aws_cloudwatch.MathExpression({
                expression: 'errors / invocations',
                usingMetrics: {
                    errors: this.routingLambda.metricErrors({
                        period: Duration.minutes(5),
                        statistic: 'avg',
                    }),
                    invocations: this.routingLambda.metricInvocations({
                        period: Duration.minutes(5),
                        statistic: 'avg',
                    }),
                },
            }),
            threshold: 0.05,
            evaluationPeriods: 3,
        });
        const lambdaThrottlesErrorRate = new aws_cloudwatch.Alarm(this, 'RoutingAPI-LambdaThrottles', {
            metric: this.routingLambda.metricThrottles({
                period: Duration.minutes(5),
                statistic: 'sum',
            }),
            threshold: 10,
            evaluationPeriods: 3,
        });
        if (chatbotSNSArn) {
            const chatBotTopic = aws_sns.Topic.fromTopicArn(this, 'ChatbotTopic', chatbotSNSArn);
            lambdaAlarmErrorRate.addAlarmAction(new aws_cloudwatch_actions.SnsAction(chatBotTopic));
            lambdaThrottlesErrorRate.addAlarmAction(new aws_cloudwatch_actions.SnsAction(chatBotTopic));
        }
        const enableProvisionedConcurrency = provisionedConcurrency > 0;
        this.routingLambdaAlias = new aws_lambda.Alias(this, 'RoutingLiveAlias', {
            aliasName: 'live',
            version: this.routingLambda.currentVersion,
            provisionedConcurrentExecutions: enableProvisionedConcurrency ? provisionedConcurrency : undefined,
        });
        if (enableProvisionedConcurrency) {
            const target = new asg.ScalableTarget(this, 'RoutingProvConcASG', {
                serviceNamespace: asg.ServiceNamespace.LAMBDA,
                maxCapacity: provisionedConcurrency * 5,
                minCapacity: provisionedConcurrency,
                resourceId: `function:${this.routingLambdaAlias.lambda.functionName}:${this.routingLambdaAlias.aliasName}`,
                scalableDimension: 'lambda:function:ProvisionedConcurrency',
            });
            target.node.addDependency(this.routingLambdaAlias);
            target.scaleToTrackMetric('RoutingProvConcTracking', {
                targetValue: 0.8,
                predefinedMetric: asg.PredefinedMetric.LAMBDA_PROVISIONED_CONCURRENCY_UTILIZATION,
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,