import { CachedRoutesBucket, CachedRoutesStrategy } from '../../../../../../lib/handlers/router-entities/route-caching';
import { CacheMode, ChainId } from '@tartz-one/smart-order-router';
import { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';
import { expect } from 'chai';
describe('CachedRoutesStrategy', () => {
    const WETH = new Token(ChainId.MAINNET, '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', 18, 'WETH');
    let strategy;
    beforeEach(() => {
        strategy = new CachedRoutesStrategy({
            pair: 'WETH/USD',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
            buckets: [
                new CachedRoutesBucket({ bucket: 1, blocksToLive: 2, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 5, blocksToLive: 2, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 10, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 50, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 100, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 500, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
            ],
        });
    });
    describe('#getCachingBucket', () => {
        it('find the first bucket that fits the amount', () => {
            const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 1 * 10 ** WETH.decimals);
            const cachingParameters = strategy.getCachingBucket(currencyAmount);
            expect(cachingParameters).to.not.be.undefined;
            expect(cachingParameters === null || cachingParameters === void 0 ? void 0 : cachingParameters.bucket).to.eq(1);
        });
        it('find the bucket, searching in the middle amounts', () => {
            const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 42 * 10 ** WETH.decimals);
            const cachingParameters = strategy.getCachingBucket(currencyAmount);
            expect(cachingParameters).to.not.be.undefined;
            expect(cachingParameters === null || cachingParameters === void 0 ? void 0 : cachingParameters.bucket).to.eq(50);
        });
        it('looks for bucket in higher amounts', () => {
            const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 500 * 10 ** WETH.decimals);
            const cachingParameters = strategy.getCachingBucket(currencyAmount);
            expect(cachingParameters).to.not.be.undefined;
            expect(cachingParameters === null || cachingParameters === void 0 ? void 0 : cachingParameters.bucket).to.eq(500);
        });
        it('returns undefined once we are out of range', () => {
            const currencyAmount = CurrencyAmount.fromRawAmount(WETH, 501 * 10 ** WETH.decimals);
            const cachingParameters = strategy.getCachingBucket(currencyAmount);
            expect(cachingParameters).to.be.undefined;
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLXJvdXRlcy1zdHJhdGVneS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGVzdC91bml0L2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy9yb3V0ZS1jYWNoaW5nL21vZGVsL2NhY2hlZC1yb3V0ZXMtc3RyYXRlZ3kudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw4REFBOEQsQ0FBQTtBQUN2SCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ2xFLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFFN0IsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxNQUFNLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLDRDQUE0QyxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNqRyxJQUFJLFFBQThCLENBQUE7SUFFbEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDO1lBQ2xDLElBQUksRUFBRSxVQUFVO1lBQ2hCLFNBQVMsRUFBRSxTQUFTLENBQUMsV0FBVztZQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDeEIsT0FBTyxFQUFFO2dCQUNQLElBQUksa0JBQWtCLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDdkYsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLENB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RSxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNwRixNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUVuRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQTtRQUMzQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWNoZWRSb3V0ZXNCdWNrZXQsIENhY2hlZFJvdXRlc1N0cmF0ZWd5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy9yb3V0ZS1jYWNoaW5nJ1xuaW1wb3J0IHsgQ2FjaGVNb2RlLCBDaGFpbklkIH0gZnJvbSAnQHRhcnR6LW9uZS9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBDdXJyZW5jeUFtb3VudCwgVG9rZW4sIFRyYWRlVHlwZSB9IGZyb20gJ0B1bmlzd2FwL3Nkay1jb3JlJ1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSdcblxuZGVzY3JpYmUoJ0NhY2hlZFJvdXRlc1N0cmF0ZWd5JywgKCkgPT4ge1xuICBjb25zdCBXRVRIID0gbmV3IFRva2VuKENoYWluSWQuTUFJTk5FVCwgJzB4YzAyYWFhMzliMjIzZmU4ZDBhMGU1YzRmMjdlYWQ5MDgzYzc1NmNjMicsIDE4LCAnV0VUSCcpXG4gIGxldCBzdHJhdGVneTogQ2FjaGVkUm91dGVzU3RyYXRlZ3lcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdHJhdGVneSA9IG5ldyBDYWNoZWRSb3V0ZXNTdHJhdGVneSh7XG4gICAgICBwYWlyOiAnV0VUSC9VU0QnLFxuICAgICAgdHJhZGVUeXBlOiBUcmFkZVR5cGUuRVhBQ1RfSU5QVVQsXG4gICAgICBjaGFpbklkOiBDaGFpbklkLk1BSU5ORVQsXG4gICAgICBidWNrZXRzOiBbXG4gICAgICAgIG5ldyBDYWNoZWRSb3V0ZXNCdWNrZXQoeyBidWNrZXQ6IDEsIGJsb2Nrc1RvTGl2ZTogMiwgY2FjaGVNb2RlOiBDYWNoZU1vZGUuVGFwY29tcGFyZSB9KSxcbiAgICAgICAgbmV3IENhY2hlZFJvdXRlc0J1Y2tldCh7IGJ1Y2tldDogNSwgYmxvY2tzVG9MaXZlOiAyLCBjYWNoZU1vZGU6IENhY2hlTW9kZS5UYXBjb21wYXJlIH0pLFxuICAgICAgICBuZXcgQ2FjaGVkUm91dGVzQnVja2V0KHsgYnVja2V0OiAxMCwgYmxvY2tzVG9MaXZlOiAxLCBjYWNoZU1vZGU6IENhY2hlTW9kZS5UYXBjb21wYXJlIH0pLFxuICAgICAgICBuZXcgQ2FjaGVkUm91dGVzQnVja2V0KHsgYnVja2V0OiA1MCwgYmxvY2tzVG9MaXZlOiAxLCBjYWNoZU1vZGU6IENhY2hlTW9kZS5UYXBjb21wYXJlIH0pLFxuICAgICAgICBuZXcgQ2FjaGVkUm91dGVzQnVja2V0KHsgYnVja2V0OiAxMDAsIGJsb2Nrc1RvTGl2ZTogMSwgY2FjaGVNb2RlOiBDYWNoZU1vZGUuVGFwY29tcGFyZSB9KSxcbiAgICAgICAgbmV3IENhY2hlZFJvdXRlc0J1Y2tldCh7IGJ1Y2tldDogNTAwLCBibG9ja3NUb0xpdmU6IDEsIGNhY2hlTW9kZTogQ2FjaGVNb2RlLlRhcGNvbXBhcmUgfSksXG4gICAgICBdLFxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJyNnZXRDYWNoaW5nQnVja2V0JywgKCkgPT4ge1xuICAgIGl0KCdmaW5kIHRoZSBmaXJzdCBidWNrZXQgdGhhdCBmaXRzIHRoZSBhbW91bnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW5jeUFtb3VudCA9IEN1cnJlbmN5QW1vdW50LmZyb21SYXdBbW91bnQoV0VUSCwgMSAqIDEwICoqIFdFVEguZGVjaW1hbHMpXG4gICAgICBjb25zdCBjYWNoaW5nUGFyYW1ldGVycyA9IHN0cmF0ZWd5LmdldENhY2hpbmdCdWNrZXQoY3VycmVuY3lBbW91bnQpXG5cbiAgICAgIGV4cGVjdChjYWNoaW5nUGFyYW1ldGVycykudG8ubm90LmJlLnVuZGVmaW5lZFxuICAgICAgZXhwZWN0KGNhY2hpbmdQYXJhbWV0ZXJzPy5idWNrZXQpLnRvLmVxKDEpXG4gICAgfSlcblxuICAgIGl0KCdmaW5kIHRoZSBidWNrZXQsIHNlYXJjaGluZyBpbiB0aGUgbWlkZGxlIGFtb3VudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW5jeUFtb3VudCA9IEN1cnJlbmN5QW1vdW50LmZyb21SYXdBbW91bnQoV0VUSCwgNDIgKiAxMCAqKiBXRVRILmRlY2ltYWxzKVxuICAgICAgY29uc3QgY2FjaGluZ1BhcmFtZXRlcnMgPSBzdHJhdGVneS5nZXRDYWNoaW5nQnVja2V0KGN1cnJlbmN5QW1vdW50KVxuXG4gICAgICBleHBlY3QoY2FjaGluZ1BhcmFtZXRlcnMpLnRvLm5vdC5iZS51bmRlZmluZWRcbiAgICAgIGV4cGVjdChjYWNoaW5nUGFyYW1ldGVycz8uYnVja2V0KS50by5lcSg1MClcbiAgICB9KVxuXG4gICAgaXQoJ2xvb2tzIGZvciBidWNrZXQgaW4gaGlnaGVyIGFtb3VudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW5jeUFtb3VudCA9IEN1cnJlbmN5QW1vdW50LmZyb21SYXdBbW91bnQoV0VUSCwgNTAwICogMTAgKiogV0VUSC5kZWNpbWFscylcbiAgICAgIGNvbnN0IGNhY2hpbmdQYXJhbWV0ZXJzID0gc3RyYXRlZ3kuZ2V0Q2FjaGluZ0J1Y2tldChjdXJyZW5jeUFtb3VudClcblxuICAgICAgZXhwZWN0KGNhY2hpbmdQYXJhbWV0ZXJzKS50by5ub3QuYmUudW5kZWZpbmVkXG4gICAgICBleHBlY3QoY2FjaGluZ1BhcmFtZXRlcnM/LmJ1Y2tldCkudG8uZXEoNTAwKVxuICAgIH0pXG5cbiAgICBpdCgncmV0dXJucyB1bmRlZmluZWQgb25jZSB3ZSBhcmUgb3V0IG9mIHJhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVuY3lBbW91bnQgPSBDdXJyZW5jeUFtb3VudC5mcm9tUmF3QW1vdW50KFdFVEgsIDUwMSAqIDEwICoqIFdFVEguZGVjaW1hbHMpXG4gICAgICBjb25zdCBjYWNoaW5nUGFyYW1ldGVycyA9IHN0cmF0ZWd5LmdldENhY2hpbmdCdWNrZXQoY3VycmVuY3lBbW91bnQpXG5cbiAgICAgIGV4cGVjdChjYWNoaW5nUGFyYW1ldGVycykudG8uYmUudW5kZWZpbmVkXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=