import { expect } from 'chai';
import { ProtocolsBucketBlockNumber } from '../../../../../../lib/handlers/router-entities/route-caching/model/protocols-bucket-block-number';
import { Protocol } from '@uniswap/router-sdk';
describe('ProtocolsBucketBlockNumber', () => {
    describe('#fullKey', () => {
        it('returns a string-ified version of the object', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.MIXED, Protocol.V2, Protocol.V3],
                bucket: 5,
                blockNumber: 12345,
            });
            expect(protocolsBucketBlockNumber.fullKey()).to.eq('MIXED,V2,V3/5/12345');
        });
        it('protocols are sorted, even if the original array is not', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
                bucket: 5,
                blockNumber: 12345,
            });
            expect(protocolsBucketBlockNumber.fullKey()).to.eq('MIXED,V2,V3/5/12345');
        });
        it('throws an error when the bucketNumber is undefined', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
                bucket: 5,
            });
            expect(() => protocolsBucketBlockNumber.fullKey()).to.throw('BlockNumber is necessary to create a fullKey');
        });
    });
    describe('#protocolsBucketPartialKey', () => {
        it('returns a string-ified version of the object without the blockNumber', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.MIXED, Protocol.V2, Protocol.V3],
                bucket: 5,
                blockNumber: 12345,
            });
            expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).to.eq('MIXED,V2,V3/5/');
        });
        it('protocols are sorted, even if the original array is not, without the blockNumber', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
                bucket: 5,
                blockNumber: 12345,
            });
            expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).to.eq('MIXED,V2,V3/5/');
        });
        it('returns the partial key even if blockNumber is undefined', () => {
            const protocolsBucketBlockNumber = new ProtocolsBucketBlockNumber({
                protocols: [Protocol.V3, Protocol.MIXED, Protocol.V2],
                bucket: 5,
            });
            expect(protocolsBucketBlockNumber.protocolsBucketPartialKey()).to.eq('MIXED,V2,V3/5/');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2xzLWJ1Y2tldC1ibG9jay1udW1iZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9oYW5kbGVycy9yb3V0ZXItZW50aXRpZXMvcm91dGUtY2FjaGluZy9tb2RlbC9wcm90b2NvbHMtYnVja2V0LWJsb2NrLW51bWJlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0dBQWtHLENBQUE7QUFDN0ksT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBRTlDLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtZQUN0RCxNQUFNLDBCQUEwQixHQUFHLElBQUksMEJBQTBCLENBQUM7Z0JBQ2hFLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNyRCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxXQUFXLEVBQUUsS0FBSzthQUNuQixDQUFDLENBQUE7WUFFRixNQUFNLENBQUMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLENBQUE7UUFDM0UsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMseURBQXlELEVBQUUsR0FBRyxFQUFFO1lBQ2pFLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQztnQkFDaEUsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ3JELE1BQU0sRUFBRSxDQUFDO2dCQUNULFdBQVcsRUFBRSxLQUFLO2FBQ25CLENBQUMsQ0FBQTtZQUVGLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsQ0FBQTtRQUMzRSxDQUFDLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7WUFDNUQsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLDBCQUEwQixDQUFDO2dCQUNoRSxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDckQsTUFBTSxFQUFFLENBQUM7YUFDVixDQUFDLENBQUE7WUFFRixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUE7UUFDN0csQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEdBQUcsRUFBRTtZQUM5RSxNQUFNLDBCQUEwQixHQUFHLElBQUksMEJBQTBCLENBQUM7Z0JBQ2hFLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNyRCxNQUFNLEVBQUUsQ0FBQztnQkFDVCxXQUFXLEVBQUUsS0FBSzthQUNuQixDQUFDLENBQUE7WUFFRixNQUFNLENBQUMsMEJBQTBCLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtRQUN4RixDQUFDLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxrRkFBa0YsRUFBRSxHQUFHLEVBQUU7WUFDMUYsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLDBCQUEwQixDQUFDO2dCQUNoRSxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDckQsTUFBTSxFQUFFLENBQUM7Z0JBQ1QsV0FBVyxFQUFFLEtBQUs7YUFDbkIsQ0FBQyxDQUFBO1lBRUYsTUFBTSxDQUFDLDBCQUEwQixDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDeEYsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsMERBQTBELEVBQUUsR0FBRyxFQUFFO1lBQ2xFLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQztnQkFDaEUsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQ3JELE1BQU0sRUFBRSxDQUFDO2FBQ1YsQ0FBQyxDQUFBO1lBRUYsTUFBTSxDQUFDLDBCQUEwQixDQUFDLHlCQUF5QixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDeEYsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSdcbmltcG9ydCB7IFByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy9yb3V0ZS1jYWNoaW5nL21vZGVsL3Byb3RvY29scy1idWNrZXQtYmxvY2stbnVtYmVyJ1xuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICdAdW5pc3dhcC9yb3V0ZXItc2RrJ1xuXG5kZXNjcmliZSgnUHJvdG9jb2xzQnVja2V0QmxvY2tOdW1iZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCcjZnVsbEtleScsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyBhIHN0cmluZy1pZmllZCB2ZXJzaW9uIG9mIHRoZSBvYmplY3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlciA9IG5ldyBQcm90b2NvbHNCdWNrZXRCbG9ja051bWJlcih7XG4gICAgICAgIHByb3RvY29sczogW1Byb3RvY29sLk1JWEVELCBQcm90b2NvbC5WMiwgUHJvdG9jb2wuVjNdLFxuICAgICAgICBidWNrZXQ6IDUsXG4gICAgICAgIGJsb2NrTnVtYmVyOiAxMjM0NSxcbiAgICAgIH0pXG5cbiAgICAgIGV4cGVjdChwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlci5mdWxsS2V5KCkpLnRvLmVxKCdNSVhFRCxWMixWMy81LzEyMzQ1JylcbiAgICB9KVxuXG4gICAgaXQoJ3Byb3RvY29scyBhcmUgc29ydGVkLCBldmVuIGlmIHRoZSBvcmlnaW5hbCBhcnJheSBpcyBub3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlciA9IG5ldyBQcm90b2NvbHNCdWNrZXRCbG9ja051bWJlcih7XG4gICAgICAgIHByb3RvY29sczogW1Byb3RvY29sLlYzLCBQcm90b2NvbC5NSVhFRCwgUHJvdG9jb2wuVjJdLFxuICAgICAgICBidWNrZXQ6IDUsXG4gICAgICAgIGJsb2NrTnVtYmVyOiAxMjM0NSxcbiAgICAgIH0pXG5cbiAgICAgIGV4cGVjdChwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlci5mdWxsS2V5KCkpLnRvLmVxKCdNSVhFRCxWMixWMy81LzEyMzQ1JylcbiAgICB9KVxuXG4gICAgaXQoJ3Rocm93cyBhbiBlcnJvciB3aGVuIHRoZSBidWNrZXROdW1iZXIgaXMgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvdG9jb2xzQnVja2V0QmxvY2tOdW1iZXIgPSBuZXcgUHJvdG9jb2xzQnVja2V0QmxvY2tOdW1iZXIoe1xuICAgICAgICBwcm90b2NvbHM6IFtQcm90b2NvbC5WMywgUHJvdG9jb2wuTUlYRUQsIFByb3RvY29sLlYyXSxcbiAgICAgICAgYnVja2V0OiA1LFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KCgpID0+IHByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyLmZ1bGxLZXkoKSkudG8udGhyb3coJ0Jsb2NrTnVtYmVyIGlzIG5lY2Vzc2FyeSB0byBjcmVhdGUgYSBmdWxsS2V5JylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCcjcHJvdG9jb2xzQnVja2V0UGFydGlhbEtleScsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyBhIHN0cmluZy1pZmllZCB2ZXJzaW9uIG9mIHRoZSBvYmplY3Qgd2l0aG91dCB0aGUgYmxvY2tOdW1iZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlciA9IG5ldyBQcm90b2NvbHNCdWNrZXRCbG9ja051bWJlcih7XG4gICAgICAgIHByb3RvY29sczogW1Byb3RvY29sLk1JWEVELCBQcm90b2NvbC5WMiwgUHJvdG9jb2wuVjNdLFxuICAgICAgICBidWNrZXQ6IDUsXG4gICAgICAgIGJsb2NrTnVtYmVyOiAxMjM0NSxcbiAgICAgIH0pXG5cbiAgICAgIGV4cGVjdChwcm90b2NvbHNCdWNrZXRCbG9ja051bWJlci5wcm90b2NvbHNCdWNrZXRQYXJ0aWFsS2V5KCkpLnRvLmVxKCdNSVhFRCxWMixWMy81LycpXG4gICAgfSlcblxuICAgIGl0KCdwcm90b2NvbHMgYXJlIHNvcnRlZCwgZXZlbiBpZiB0aGUgb3JpZ2luYWwgYXJyYXkgaXMgbm90LCB3aXRob3V0IHRoZSBibG9ja051bWJlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyID0gbmV3IFByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyKHtcbiAgICAgICAgcHJvdG9jb2xzOiBbUHJvdG9jb2wuVjMsIFByb3RvY29sLk1JWEVELCBQcm90b2NvbC5WMl0sXG4gICAgICAgIGJ1Y2tldDogNSxcbiAgICAgICAgYmxvY2tOdW1iZXI6IDEyMzQ1LFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyLnByb3RvY29sc0J1Y2tldFBhcnRpYWxLZXkoKSkudG8uZXEoJ01JWEVELFYyLFYzLzUvJylcbiAgICB9KVxuXG4gICAgaXQoJ3JldHVybnMgdGhlIHBhcnRpYWwga2V5IGV2ZW4gaWYgYmxvY2tOdW1iZXIgaXMgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvdG9jb2xzQnVja2V0QmxvY2tOdW1iZXIgPSBuZXcgUHJvdG9jb2xzQnVja2V0QmxvY2tOdW1iZXIoe1xuICAgICAgICBwcm90b2NvbHM6IFtQcm90b2NvbC5WMywgUHJvdG9jb2wuTUlYRUQsIFByb3RvY29sLlYyXSxcbiAgICAgICAgYnVja2V0OiA1LFxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHByb3RvY29sc0J1Y2tldEJsb2NrTnVtYmVyLnByb3RvY29sc0J1Y2tldFBhcnRpYWxLZXkoKSkudG8uZXEoJ01JWEVELFYyLFYzLzUvJylcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==