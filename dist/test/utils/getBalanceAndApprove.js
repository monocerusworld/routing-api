import { CurrencyAmount } from '@uniswap/sdk-core';
import { constants } from 'ethers';
import { Erc20__factory } from '../../lib/types/ext/factories/Erc20__factory';
export const getBalance = async (alice, currency) => {
    if (!currency.isToken) {
        return CurrencyAmount.fromRawAmount(currency, (await alice.getBalance()).toString());
    }
    const aliceTokenIn = Erc20__factory.connect(currency.address, alice);
    return CurrencyAmount.fromRawAmount(currency, (await aliceTokenIn.balanceOf(alice.address)).toString());
};
export const getBalanceOfAddress = async (alice, address, currency) => {
    // tokens / WETH only.
    const token = Erc20__factory.connect(currency.address, alice);
    return CurrencyAmount.fromRawAmount(currency, (await token.balanceOf(address)).toString());
};
export const getBalanceAndApprove = async (alice, approveTarget, currency) => {
    if (currency.isToken) {
        const aliceTokenIn = Erc20__factory.connect(currency.address, alice);
        if (currency.symbol == 'USDT') {
            await (await aliceTokenIn.approve(approveTarget, 0)).wait();
        }
        await (await aliceTokenIn.approve(approveTarget, constants.MaxUint256)).wait();
    }
    return getBalance(alice, currency);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QmFsYW5jZUFuZEFwcHJvdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3V0aWxzL2dldEJhbGFuY2VBbmRBcHByb3ZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBWSxjQUFjLEVBQVMsTUFBTSxtQkFBbUIsQ0FBQTtBQUNuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRWxDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQTtBQUU3RSxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEtBQXdCLEVBQUUsUUFBa0IsRUFBcUMsRUFBRTtJQUNsSCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNyQixPQUFPLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0tBQ3JGO0lBRUQsTUFBTSxZQUFZLEdBQVUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBRTNFLE9BQU8sY0FBYyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtBQUN6RyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQ3RDLEtBQXdCLEVBQ3hCLE9BQWUsRUFDZixRQUFlLEVBQ2lCLEVBQUU7SUFDbEMsc0JBQXNCO0lBQ3RCLE1BQU0sS0FBSyxHQUFVLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUVwRSxPQUFPLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtBQUM1RixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLEVBQ3ZDLEtBQXdCLEVBQ3hCLGFBQXFCLEVBQ3JCLFFBQWtCLEVBQ2lCLEVBQUU7SUFDckMsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ3BCLE1BQU0sWUFBWSxHQUFVLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUUzRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFFO1lBQzdCLE1BQU0sQ0FBQyxNQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDNUQ7UUFDRCxNQUFNLENBQUMsTUFBTSxZQUFZLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtLQUMvRTtJQUVELE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUNwQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduZXJXaXRoQWRkcmVzcyB9IGZyb20gJ0Bub21pY2xhYnMvaGFyZGhhdC1ldGhlcnMvc2lnbmVycydcbmltcG9ydCB7IEN1cnJlbmN5LCBDdXJyZW5jeUFtb3VudCwgVG9rZW4gfSBmcm9tICdAdW5pc3dhcC9zZGstY29yZSdcbmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJ2V0aGVycydcbmltcG9ydCB7IEVyYzIwIH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzL2V4dC9FcmMyMCdcbmltcG9ydCB7IEVyYzIwX19mYWN0b3J5IH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzL2V4dC9mYWN0b3JpZXMvRXJjMjBfX2ZhY3RvcnknXG5cbmV4cG9ydCBjb25zdCBnZXRCYWxhbmNlID0gYXN5bmMgKGFsaWNlOiBTaWduZXJXaXRoQWRkcmVzcywgY3VycmVuY3k6IEN1cnJlbmN5KTogUHJvbWlzZTxDdXJyZW5jeUFtb3VudDxDdXJyZW5jeT4+ID0+IHtcbiAgaWYgKCFjdXJyZW5jeS5pc1Rva2VuKSB7XG4gICAgcmV0dXJuIEN1cnJlbmN5QW1vdW50LmZyb21SYXdBbW91bnQoY3VycmVuY3ksIChhd2FpdCBhbGljZS5nZXRCYWxhbmNlKCkpLnRvU3RyaW5nKCkpXG4gIH1cblxuICBjb25zdCBhbGljZVRva2VuSW46IEVyYzIwID0gRXJjMjBfX2ZhY3RvcnkuY29ubmVjdChjdXJyZW5jeS5hZGRyZXNzLCBhbGljZSlcblxuICByZXR1cm4gQ3VycmVuY3lBbW91bnQuZnJvbVJhd0Ftb3VudChjdXJyZW5jeSwgKGF3YWl0IGFsaWNlVG9rZW5Jbi5iYWxhbmNlT2YoYWxpY2UuYWRkcmVzcykpLnRvU3RyaW5nKCkpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRCYWxhbmNlT2ZBZGRyZXNzID0gYXN5bmMgKFxuICBhbGljZTogU2lnbmVyV2l0aEFkZHJlc3MsXG4gIGFkZHJlc3M6IHN0cmluZyxcbiAgY3VycmVuY3k6IFRva2VuXG4pOiBQcm9taXNlPEN1cnJlbmN5QW1vdW50PFRva2VuPj4gPT4ge1xuICAvLyB0b2tlbnMgLyBXRVRIIG9ubHkuXG4gIGNvbnN0IHRva2VuOiBFcmMyMCA9IEVyYzIwX19mYWN0b3J5LmNvbm5lY3QoY3VycmVuY3kuYWRkcmVzcywgYWxpY2UpXG5cbiAgcmV0dXJuIEN1cnJlbmN5QW1vdW50LmZyb21SYXdBbW91bnQoY3VycmVuY3ksIChhd2FpdCB0b2tlbi5iYWxhbmNlT2YoYWRkcmVzcykpLnRvU3RyaW5nKCkpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRCYWxhbmNlQW5kQXBwcm92ZSA9IGFzeW5jIChcbiAgYWxpY2U6IFNpZ25lcldpdGhBZGRyZXNzLFxuICBhcHByb3ZlVGFyZ2V0OiBzdHJpbmcsXG4gIGN1cnJlbmN5OiBDdXJyZW5jeVxuKTogUHJvbWlzZTxDdXJyZW5jeUFtb3VudDxDdXJyZW5jeT4+ID0+IHtcbiAgaWYgKGN1cnJlbmN5LmlzVG9rZW4pIHtcbiAgICBjb25zdCBhbGljZVRva2VuSW46IEVyYzIwID0gRXJjMjBfX2ZhY3RvcnkuY29ubmVjdChjdXJyZW5jeS5hZGRyZXNzLCBhbGljZSlcblxuICAgIGlmIChjdXJyZW5jeS5zeW1ib2wgPT0gJ1VTRFQnKSB7XG4gICAgICBhd2FpdCAoYXdhaXQgYWxpY2VUb2tlbkluLmFwcHJvdmUoYXBwcm92ZVRhcmdldCwgMCkpLndhaXQoKVxuICAgIH1cbiAgICBhd2FpdCAoYXdhaXQgYWxpY2VUb2tlbkluLmFwcHJvdmUoYXBwcm92ZVRhcmdldCwgY29uc3RhbnRzLk1heFVpbnQyNTYpKS53YWl0KClcbiAgfVxuXG4gIHJldHVybiBnZXRCYWxhbmNlKGFsaWNlLCBjdXJyZW5jeSlcbn1cbiJdfQ==