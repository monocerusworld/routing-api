import { ChainId, log, V3SubgraphProvider } from '@tartz-one/smart-order-router';
import { S3 } from 'aws-sdk';
import _ from 'lodash';
import NodeCache from 'node-cache';
const POOL_CACHE = new NodeCache({ stdTTL: 240, useClones: false });
const POOL_CACHE_KEY = (chainId) => `pools${chainId}`;
export class V3AWSSubgraphProviderWithFallback extends V3SubgraphProvider {
    constructor(chain, bucket, key) {
        super(chain);
        this.chain = chain;
        this.bucket = bucket;
        this.key = `${key}${chain != ChainId.MAINNET ? `-${chain}` : ''}`;
    }
    async getPools() {
        log.info(`In legacy AWS subgraph provider for protocol V3`);
        const s3 = new S3();
        const cachedPools = POOL_CACHE.get(POOL_CACHE_KEY(this.chain));
        if (cachedPools) {
            log.info({ subgraphPoolsSample: cachedPools.slice(0, 5) }, `Subgraph pools fetched from local cache. Num: ${cachedPools.length}`);
            return cachedPools;
        }
        log.info({ bucket: this.bucket, key: this.key }, `Subgraph pools local cache miss. Getting subgraph pools from S3 ${this.bucket}/${this.key}`);
        try {
            const result = await s3.getObject({ Key: this.key, Bucket: this.bucket }).promise();
            const { Body: poolsBuffer } = result;
            if (!poolsBuffer) {
                throw new Error('Could not get subgraph pool cache from S3');
            }
            let pools = JSON.parse(poolsBuffer.toString('utf-8'));
            if (pools[0].totalValueLockedETH) {
                pools = _.map(pools, (pool) => ({
                    ...pool,
                    id: pool.id.toLowerCase(),
                    token0: {
                        id: pool.token0.id.toLowerCase(),
                    },
                    token1: {
                        id: pool.token1.id.toLowerCase(),
                    },
                    tvlETH: parseFloat(pool.totalValueLockedETH),
                    tvlUSD: parseFloat(pool.totalValueLockedUSD),
                }));
                log.info({ sample: pools.slice(0, 5) }, 'Converted legacy schema to new schema');
            }
            log.info({ bucket: this.bucket, key: this.key, sample: pools.slice(0, 3) }, `Got subgraph pools from S3. Num: ${pools.length}`);
            POOL_CACHE.set(POOL_CACHE_KEY(this.chain), pools);
            return pools;
        }
        catch (err) {
            log.info({ bucket: this.bucket, key: this.key }, `Failed to get subgraph pools from S3 ${this.bucket}/${this.key}.`);
            return super.getPools();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjMtYXdzLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy92My1hd3Mtc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBdUIsR0FBRyxFQUFrQixrQkFBa0IsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3JILE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDNUIsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBQ3RCLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7QUFDbkUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUUsQ0FBQyxRQUFRLE9BQU8sRUFBRSxDQUFBO0FBRTlELE1BQU0sT0FBTyxpQ0FBa0MsU0FBUSxrQkFBa0I7SUFHdkUsWUFBb0IsS0FBYyxFQUFVLE1BQWMsRUFBRSxHQUFXO1FBQ3JFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQURNLFVBQUssR0FBTCxLQUFLLENBQVM7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXhELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ25FLENBQUM7SUFFTSxLQUFLLENBQUMsUUFBUTtRQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUE7UUFFM0QsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQTtRQUVuQixN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QUFBO1lBRUQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7U0FDeEI7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbklkLCBJVjNTdWJncmFwaFByb3ZpZGVyLCBsb2csIFYzU3ViZ3JhcGhQb29sLCBWM1N1YmdyYXBoUHJvdmlkZXIgfSBmcm9tICdAdGFydHotb25lL3NtYXJ0LW9yZGVyLXJvdXRlcidcbmltcG9ydCB7IFMzIH0gZnJvbSAnYXdzLXNkaydcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCBOb2RlQ2FjaGUgZnJvbSAnbm9kZS1jYWNoZSdcblxuY29uc3QgUE9PTF9DQUNIRSA9IG5ldyBOb2RlQ2FjaGUoeyBzdGRUVEw6IDI0MCwgdXNlQ2xvbmVzOiBmYWxzZSB9KVxuY29uc3QgUE9PTF9DQUNIRV9LRVkgPSAoY2hhaW5JZDogQ2hhaW5JZCkgPT4gYHBvb2xzJHtjaGFpbklkfWBcblxuZXhwb3J0IGNsYXNzIFYzQVdTU3ViZ3JhcGhQcm92aWRlcldpdGhGYWxsYmFjayBleHRlbmRzIFYzU3ViZ3JhcGhQcm92aWRlciBpbXBsZW1lbnRzIElWM1N1YmdyYXBoUHJvdmlkZXIge1xuICBwcml2YXRlIGtleTogc3RyaW5nXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFpbjogQ2hhaW5JZCwgcHJpdmF0ZSBidWNrZXQ6IHN0cmluZywga2V5OiBzdHJpbmcpIHtcbiAgICBzdXBlcihjaGFpbilcbiAgICB0aGlzLmtleSA9IGAke2tleX0ke2NoYWluICE9IENoYWluSWQuTUFJTk5FVCA/IGAtJHtjaGFpbn1gIDogJyd9YFxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFBvb2xzKCk6IFByb21pc2U8VjNTdWJncmFwaFBvb2xbXT4ge1xuICAgIGxvZy5pbmZvKGBJbiBsZWdhY3kgQVdTIHN1YmdyYXBoIHByb3ZpZGVyIGZvciBwcm90b2NvbCBWM2ApXG5cbiAgICBjb25zdCBzMyA9IG5ldyBTMygpXG5cbiAgICBjb25zdCBjYWNoZWRQb29scyA9IFBPT0xfQ0FDSEUuZ2V0PFYzU3ViZ3JhcGhQb29sW10+KFBPT0xfQ0FDSEVfS0VZKHRoaXMuY2hhaW4pKVxuXG4gICAgaWYgKGNhY2hlZFBvb2xzKSB7XG4gICAgICBsb2cuaW5mbyhcbiAgICAgICAgeyBzdWJncmFwaFBvb2xzU2FtcGxlOiBjYWNoZWRQb29scy5zbGljZSgwLCA1KSB9LFxuICAgICAgICBgU3ViZ3JhcGggcG9vbHMgZmV0Y2hlZCBmcm9tIGxvY2FsIGNhY2hlLiBOdW06ICR7Y2FjaGVkUG9vbHMubGVuZ3RofWBcbiAgICAgIClcblxuICAgICAgcmV0dXJuIGNhY2hlZFBvb2xzXG4gICAgfVxuXG4gICAgbG9nLmluZm8oXG4gICAgICB7IGJ1Y2tldDogdGhpcy5idWNrZXQsIGtleTogdGhpcy5rZXkgfSxcbiAgICAgIGBTdWJncmFwaCBwb29scyBsb2NhbCBjYWNoZSBtaXNzLiBHZXR0aW5nIHN1YmdyYXBoIHBvb2xzIGZyb20gUzMgJHt0aGlzLmJ1Y2tldH0vJHt0aGlzLmtleX1gXG4gICAgKVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzMy5nZXRPYmplY3QoeyBLZXk6IHRoaXMua2V5LCBCdWNrZXQ6IHRoaXMuYnVja2V0IH0pLnByb21pc2UoKVxuXG4gICAgICBjb25zdCB7IEJvZHk6IHBvb2xzQnVmZmVyIH0gPSByZXN1bHRcblxuICAgICAgaWYgKCFwb29sc0J1ZmZlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZXQgc3ViZ3JhcGggcG9vbCBjYWNoZSBmcm9tIFMzJylcbiAgICAgIH1cblxuICAgICAgbGV0IHBvb2xzID0gSlNPTi5wYXJzZShwb29sc0J1ZmZlci50b1N0cmluZygndXRmLTgnKSlcblxuICAgICAgaWYgKHBvb2xzWzBdLnRvdGFsVmFsdWVMb2NrZWRFVEgpIHtcbiAgICAgICAgcG9vbHMgPSBfLm1hcChcbiAgICAgICAgICBwb29scyxcbiAgICAgICAgICAocG9vbCkgPT5cbiAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgIC4uLnBvb2wsXG4gICAgICAgICAgICAgIGlkOiBwb29sLmlkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgIHRva2VuMDoge1xuICAgICAgICAgICAgICAgIGlkOiBwb29sLnRva2VuMC5pZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0b2tlbjE6IHtcbiAgICAgICAgICAgICAgICBpZDogcG9vbC50b2tlbjEuaWQudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdHZsRVRIOiBwYXJzZUZsb2F0KHBvb2wudG90YWxWYWx1ZUxvY2tlZEVUSCksXG4gICAgICAgICAgICAgIHR2bFVTRDogcGFyc2VGbG9hdChwb29sLnRvdGFsVmFsdWVMb2NrZWRVU0QpLFxuICAgICAgICAgICAgfSBhcyBWM1N1YmdyYXBoUG9vbClcbiAgICAgICAgKVxuICAgICAgICBsb2cuaW5mbyh7IHNhbXBsZTogcG9vbHMuc2xpY2UoMCwgNSkgfSwgJ0NvbnZlcnRlZCBsZWdhY3kgc2NoZW1hIHRvIG5ldyBzY2hlbWEnKVxuICAgICAgfVxuXG4gICAgICBsb2cuaW5mbyhcbiAgICAgICAgeyBidWNrZXQ6IHRoaXMuYnVja2V0LCBrZXk6IHRoaXMua2V5LCBzYW1wbGU6IHBvb2xzLnNsaWNlKDAsIDMpIH0sXG4gICAgICAgIGBHb3Qgc3ViZ3JhcGggcG9vbHMgZnJvbSBTMy4gTnVtOiAke3Bvb2xzLmxlbmd0aH1gXG4gICAgICApXG5cbiAgICAgIFBPT0xfQ0FDSEUuc2V0PFYzU3ViZ3JhcGhQb29sW10+KFBPT0xfQ0FDSEVfS0VZKHRoaXMuY2hhaW4pLCBwb29scylcblxuICAgICAgcmV0dXJuIHBvb2xzXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuaW5mbyhcbiAgICAgICAgeyBidWNrZXQ6IHRoaXMuYnVja2V0LCBrZXk6IHRoaXMua2V5IH0sXG4gICAgICAgIGBGYWlsZWQgdG8gZ2V0IHN1YmdyYXBoIHBvb2xzIGZyb20gUzMgJHt0aGlzLmJ1Y2tldH0vJHt0aGlzLmtleX0uYFxuICAgICAgKVxuXG4gICAgICByZXR1cm4gc3VwZXIuZ2V0UG9vbHMoKVxuICAgIH1cbiAgfVxufVxuIl19