import { CachingTokenListProvider, log, NodeJSCache, } from '@tartz-one/smart-order-router';
import S3 from 'aws-sdk/clients/s3';
import NodeCache from 'node-cache';
const TOKEN_LIST_CACHE = new NodeCache({ stdTTL: 600, useClones: false });
export class AWSTokenListProvider extends CachingTokenListProvider {
    static async fromTokenListS3Bucket(chainId, bucket, tokenListURI) {
        const s3 = new S3();
        const cachedTokenList = TOKEN_LIST_CACHE.get(tokenListURI);
        const tokenCache = new NodeCache({ stdTTL: 360, useClones: false });
        if (cachedTokenList) {
            log.info(`Found token lists for ${tokenListURI} in local cache`);
            return super.fromTokenList(chainId, cachedTokenList, new NodeJSCache(tokenCache));
        }
        try {
            log.info(`Getting tokenLists from s3.`);
            const tokenListResult = await s3.getObject({ Key: encodeURIComponent(tokenListURI), Bucket: bucket }).promise();
            const { Body: tokenListBuffer } = tokenListResult;
            if (!tokenListBuffer) {
                return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
            }
            const tokenList = JSON.parse(tokenListBuffer.toString('utf-8'));
            log.info(`Got both tokenLists from s3. ${tokenList.tokens.length} tokens in main list.`);
            TOKEN_LIST_CACHE.set(tokenListURI, tokenList);
            return new CachingTokenListProvider(chainId, tokenList, new NodeJSCache(tokenCache));
        }
        catch (err) {
            log.info({ err }, `Failed to get tokenLists from s3.`);
            return super.fromTokenListURI(chainId, tokenListURI, new NodeJSCache(tokenCache));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXRva2VuLWxpc3QtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvaGFuZGxlcnMvcm91dGVyLWVudGl0aWVzL2F3cy10b2tlbi1saXN0LXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx3QkFBd0IsRUFJeEIsR0FBRyxFQUNILFdBQVcsR0FDWixNQUFNLCtCQUErQixDQUFBO0FBRXRDLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQ25DLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQTtBQUVsQyxNQUFNLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUV6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsd0JBQXdCO0lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQ3ZDLE9BQWdCLEVBQ2hCLE1BQWMsRUFDZCxZQUFvQjtRQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFBO1FBRW5CLE1BQU0sZUFBZSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBWSxZQUFZLENBQUMsQ0FBQTtRQUVyRSxNQUFNLFVBQVUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7UUFFbkUsSUFBSSxlQUFlLEVBQUU7WUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsWUFBWSxpQkFBaUIsQ0FBQyxDQUFBO1lBQ2hFLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7U0FDbEY7UUFFRCxJQUFJO1lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1lBQ3ZDLE1BQU0sZUFBZSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUUvRyxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLGVBQWUsQ0FBQTtZQUVqRCxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNwQixPQUFPLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7YUFDbEY7WUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQWMsQ0FBQTtZQUU1RSxHQUFHLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLENBQUMsQ0FBQTtZQUV4RixnQkFBZ0IsQ0FBQyxHQUFHLENBQVksWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFBO1lBRXhELE9BQU8sSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7U0FDckY7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFBO1lBQ3RELE9BQU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTtTQUNsRjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENhY2hpbmdUb2tlbkxpc3RQcm92aWRlcixcbiAgQ2hhaW5JZCxcbiAgSVRva2VuTGlzdFByb3ZpZGVyLFxuICBJVG9rZW5Qcm92aWRlcixcbiAgbG9nLFxuICBOb2RlSlNDYWNoZSxcbn0gZnJvbSAnQHRhcnR6LW9uZS9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBUb2tlbkxpc3QgfSBmcm9tICdAdW5pc3dhcC90b2tlbi1saXN0cydcbmltcG9ydCBTMyBmcm9tICdhd3Mtc2RrL2NsaWVudHMvczMnXG5pbXBvcnQgTm9kZUNhY2hlIGZyb20gJ25vZGUtY2FjaGUnXG5cbmNvbnN0IFRPS0VOX0xJU1RfQ0FDSEUgPSBuZXcgTm9kZUNhY2hlKHsgc3RkVFRMOiA2MDAsIHVzZUNsb25lczogZmFsc2UgfSlcblxuZXhwb3J0IGNsYXNzIEFXU1Rva2VuTGlzdFByb3ZpZGVyIGV4dGVuZHMgQ2FjaGluZ1Rva2VuTGlzdFByb3ZpZGVyIHtcbiAgcHVibGljIHN0YXRpYyBhc3luYyBmcm9tVG9rZW5MaXN0UzNCdWNrZXQoXG4gICAgY2hhaW5JZDogQ2hhaW5JZCxcbiAgICBidWNrZXQ6IHN0cmluZyxcbiAgICB0b2tlbkxpc3RVUkk6IHN0cmluZ1xuICApOiBQcm9taXNlPElUb2tlbkxpc3RQcm92aWRlciAmIElUb2tlblByb3ZpZGVyPiB7XG4gICAgY29uc3QgczMgPSBuZXcgUzMoKVxuXG4gICAgY29uc3QgY2FjaGVkVG9rZW5MaXN0ID0gVE9LRU5fTElTVF9DQUNIRS5nZXQ8VG9rZW5MaXN0Pih0b2tlbkxpc3RVUkkpXG5cbiAgICBjb25zdCB0b2tlbkNhY2hlID0gbmV3IE5vZGVDYWNoZSh7IHN0ZFRUTDogMzYwLCB1c2VDbG9uZXM6IGZhbHNlIH0pXG5cbiAgICBpZiAoY2FjaGVkVG9rZW5MaXN0KSB7XG4gICAgICBsb2cuaW5mbyhgRm91bmQgdG9rZW4gbGlzdHMgZm9yICR7dG9rZW5MaXN0VVJJfSBpbiBsb2NhbCBjYWNoZWApXG4gICAgICByZXR1cm4gc3VwZXIuZnJvbVRva2VuTGlzdChjaGFpbklkLCBjYWNoZWRUb2tlbkxpc3QsIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgbG9nLmluZm8oYEdldHRpbmcgdG9rZW5MaXN0cyBmcm9tIHMzLmApXG4gICAgICBjb25zdCB0b2tlbkxpc3RSZXN1bHQgPSBhd2FpdCBzMy5nZXRPYmplY3QoeyBLZXk6IGVuY29kZVVSSUNvbXBvbmVudCh0b2tlbkxpc3RVUkkpLCBCdWNrZXQ6IGJ1Y2tldCB9KS5wcm9taXNlKClcblxuICAgICAgY29uc3QgeyBCb2R5OiB0b2tlbkxpc3RCdWZmZXIgfSA9IHRva2VuTGlzdFJlc3VsdFxuXG4gICAgICBpZiAoIXRva2VuTGlzdEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gc3VwZXIuZnJvbVRva2VuTGlzdFVSSShjaGFpbklkLCB0b2tlbkxpc3RVUkksIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9rZW5MaXN0ID0gSlNPTi5wYXJzZSh0b2tlbkxpc3RCdWZmZXIudG9TdHJpbmcoJ3V0Zi04JykpIGFzIFRva2VuTGlzdFxuXG4gICAgICBsb2cuaW5mbyhgR290IGJvdGggdG9rZW5MaXN0cyBmcm9tIHMzLiAke3Rva2VuTGlzdC50b2tlbnMubGVuZ3RofSB0b2tlbnMgaW4gbWFpbiBsaXN0LmApXG5cbiAgICAgIFRPS0VOX0xJU1RfQ0FDSEUuc2V0PFRva2VuTGlzdD4odG9rZW5MaXN0VVJJLCB0b2tlbkxpc3QpXG5cbiAgICAgIHJldHVybiBuZXcgQ2FjaGluZ1Rva2VuTGlzdFByb3ZpZGVyKGNoYWluSWQsIHRva2VuTGlzdCwgbmV3IE5vZGVKU0NhY2hlKHRva2VuQ2FjaGUpKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmluZm8oeyBlcnIgfSwgYEZhaWxlZCB0byBnZXQgdG9rZW5MaXN0cyBmcm9tIHMzLmApXG4gICAgICByZXR1cm4gc3VwZXIuZnJvbVRva2VuTGlzdFVSSShjaGFpbklkLCB0b2tlbkxpc3RVUkksIG5ldyBOb2RlSlNDYWNoZSh0b2tlbkNhY2hlKSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==