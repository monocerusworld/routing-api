import { MixedRoute, V2Route, V3Route } from '@tartz-one/smart-order-router/build/main/routers';
import { Protocol } from '@uniswap/router-sdk';
import { TokenMarshaller } from './token-marshaller';
import { PairMarshaller } from './pair-marshaller';
import { PoolMarshaller } from './pool-marshaller';
import { Pool } from '@uniswap/v3-sdk';
export class RouteMarshaller {
    static marshal(route) {
        switch (route.protocol) {
            case Protocol.V2:
                return {
                    protocol: Protocol.V2,
                    input: TokenMarshaller.marshal(route.input),
                    output: TokenMarshaller.marshal(route.output),
                    pairs: route.pairs.map((pair) => PairMarshaller.marshal(pair)),
                };
            case Protocol.V3:
                return {
                    protocol: Protocol.V3,
                    input: TokenMarshaller.marshal(route.input),
                    output: TokenMarshaller.marshal(route.output),
                    pools: route.pools.map((pool) => PoolMarshaller.marshal(pool)),
                };
            case Protocol.MIXED:
                return {
                    protocol: Protocol.MIXED,
                    input: TokenMarshaller.marshal(route.input),
                    output: TokenMarshaller.marshal(route.output),
                    pools: route.pools.map((tpool) => {
                        if (tpool instanceof Pool) {
                            return PoolMarshaller.marshal(tpool);
                        }
                        else {
                            return PairMarshaller.marshal(tpool);
                        }
                    }),
                };
        }
    }
    static unmarshal(marshalledRoute) {
        switch (marshalledRoute.protocol) {
            case Protocol.V2:
                const v2Route = marshalledRoute;
                return new V2Route(v2Route.pairs.map((marshalledPair) => PairMarshaller.unmarshal(marshalledPair)), TokenMarshaller.unmarshal(v2Route.input), TokenMarshaller.unmarshal(v2Route.output));
            case Protocol.V3:
                const v3Route = marshalledRoute;
                return new V3Route(v3Route.pools.map((marshalledPool) => PoolMarshaller.unmarshal(marshalledPool)), TokenMarshaller.unmarshal(v3Route.input), TokenMarshaller.unmarshal(v3Route.output));
            case Protocol.MIXED:
                const mixedRoute = marshalledRoute;
                const tpools = mixedRoute.pools.map((tpool) => {
                    if (tpool.protocol === Protocol.V2) {
                        return PairMarshaller.unmarshal(tpool);
                    }
                    else {
                        return PoolMarshaller.unmarshal(tpool);
                    }
                });
                return new MixedRoute(tpools, TokenMarshaller.unmarshal(mixedRoute.input), TokenMarshaller.unmarshal(mixedRoute.output));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,