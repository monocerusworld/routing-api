import { CachedRoutes } from '@tartz-one/smart-order-router';
import { TokenMarshaller } from './token-marshaller';
import { CachedRouteMarshaller } from './cached-route-marshaller';
export class CachedRoutesMarshaller {
    static marshal(cachedRoutes) {
        return {
            routes: cachedRoutes.routes.map((route) => CachedRouteMarshaller.marshal(route)),
            chainId: cachedRoutes.chainId,
            tokenIn: TokenMarshaller.marshal(cachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.marshal(cachedRoutes.tokenOut),
            protocolsCovered: cachedRoutes.protocolsCovered,
            blockNumber: cachedRoutes.blockNumber,
            tradeType: cachedRoutes.tradeType,
            blocksToLive: cachedRoutes.blocksToLive,
        };
    }
    static unmarshal(marshalledCachedRoutes) {
        return new CachedRoutes({
            routes: marshalledCachedRoutes.routes.map((route) => CachedRouteMarshaller.unmarshal(route)),
            chainId: marshalledCachedRoutes.chainId,
            tokenIn: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenIn),
            tokenOut: TokenMarshaller.unmarshal(marshalledCachedRoutes.tokenOut),
            protocolsCovered: marshalledCachedRoutes.protocolsCovered,
            blockNumber: marshalledCachedRoutes.blockNumber,
            tradeType: marshalledCachedRoutes.tradeType,
            blocksToLive: marshalledCachedRoutes.blocksToLive,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGVkLXJvdXRlcy1tYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3JvdXRlci1lbnRpdGllcy9yb3V0ZS1jYWNoaW5nL21hcnNoYWxsaW5nL2NhY2hlZC1yb3V0ZXMtbWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFJNUQsT0FBTyxFQUFtQixlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNyRSxPQUFPLEVBQUUscUJBQXFCLEVBQXlCLE1BQU0sMkJBQTJCLENBQUE7QUFheEYsTUFBTSxPQUFPLHNCQUFzQjtJQUMxQixNQUFNLENBQUMsT0FBTyxDQUFDLFlBQTBCO1FBQzlDLE9BQU87WUFDTCxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRixPQUFPLEVBQUUsWUFBWSxDQUFDLE9BQU87WUFDN0IsT0FBTyxFQUFFLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUN0RCxRQUFRLEVBQUUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1lBQ3hELGdCQUFnQixFQUFFLFlBQVksQ0FBQyxnQkFBZ0I7WUFDL0MsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUFXO1lBQ3JDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUztZQUNqQyxZQUFZLEVBQUUsWUFBWSxDQUFDLFlBQVk7U0FDeEMsQ0FBQTtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUyxDQUFDLHNCQUE4QztRQUNwRSxPQUFPLElBQUksWUFBWSxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUYsT0FBTyxFQUFFLHNCQUFzQixDQUFDLE9BQU87WUFDdkMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDO1lBQ2xFLFFBQVEsRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztZQUNwRSxnQkFBZ0IsRUFBRSxzQkFBc0IsQ0FBQyxnQkFBZ0I7WUFDekQsV0FBVyxFQUFFLHNCQUFzQixDQUFDLFdBQVc7WUFDL0MsU0FBUyxFQUFFLHNCQUFzQixDQUFDLFNBQVM7WUFDM0MsWUFBWSxFQUFFLHNCQUFzQixDQUFDLFlBQVk7U0FDbEQsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVkUm91dGVzIH0gZnJvbSAnQHRhcnR6LW9uZS9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBDaGFpbklkIH0gZnJvbSAnQHRhcnR6LW9uZS9zbWFydC1vcmRlci1yb3V0ZXIvYnVpbGQvbWFpbi91dGlsJ1xuaW1wb3J0IHsgVHJhZGVUeXBlIH0gZnJvbSAnQHVuaXN3YXAvc2RrLWNvcmUnXG5pbXBvcnQgeyBQcm90b2NvbCB9IGZyb20gJ0B1bmlzd2FwL3JvdXRlci1zZGsnXG5pbXBvcnQgeyBNYXJzaGFsbGVkVG9rZW4sIFRva2VuTWFyc2hhbGxlciB9IGZyb20gJy4vdG9rZW4tbWFyc2hhbGxlcidcbmltcG9ydCB7IENhY2hlZFJvdXRlTWFyc2hhbGxlciwgTWFyc2hhbGxlZENhY2hlZFJvdXRlIH0gZnJvbSAnLi9jYWNoZWQtcm91dGUtbWFyc2hhbGxlcidcblxuZXhwb3J0IGludGVyZmFjZSBNYXJzaGFsbGVkQ2FjaGVkUm91dGVzIHtcbiAgcm91dGVzOiBNYXJzaGFsbGVkQ2FjaGVkUm91dGVbXVxuICBjaGFpbklkOiBDaGFpbklkXG4gIHRva2VuSW46IE1hcnNoYWxsZWRUb2tlblxuICB0b2tlbk91dDogTWFyc2hhbGxlZFRva2VuXG4gIHByb3RvY29sc0NvdmVyZWQ6IFByb3RvY29sW11cbiAgYmxvY2tOdW1iZXI6IG51bWJlclxuICB0cmFkZVR5cGU6IFRyYWRlVHlwZVxuICBibG9ja3NUb0xpdmU6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgQ2FjaGVkUm91dGVzTWFyc2hhbGxlciB7XG4gIHB1YmxpYyBzdGF0aWMgbWFyc2hhbChjYWNoZWRSb3V0ZXM6IENhY2hlZFJvdXRlcyk6IE1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXM6IGNhY2hlZFJvdXRlcy5yb3V0ZXMubWFwKChyb3V0ZSkgPT4gQ2FjaGVkUm91dGVNYXJzaGFsbGVyLm1hcnNoYWwocm91dGUpKSxcbiAgICAgIGNoYWluSWQ6IGNhY2hlZFJvdXRlcy5jaGFpbklkLFxuICAgICAgdG9rZW5JbjogVG9rZW5NYXJzaGFsbGVyLm1hcnNoYWwoY2FjaGVkUm91dGVzLnRva2VuSW4pLFxuICAgICAgdG9rZW5PdXQ6IFRva2VuTWFyc2hhbGxlci5tYXJzaGFsKGNhY2hlZFJvdXRlcy50b2tlbk91dCksXG4gICAgICBwcm90b2NvbHNDb3ZlcmVkOiBjYWNoZWRSb3V0ZXMucHJvdG9jb2xzQ292ZXJlZCxcbiAgICAgIGJsb2NrTnVtYmVyOiBjYWNoZWRSb3V0ZXMuYmxvY2tOdW1iZXIsXG4gICAgICB0cmFkZVR5cGU6IGNhY2hlZFJvdXRlcy50cmFkZVR5cGUsXG4gICAgICBibG9ja3NUb0xpdmU6IGNhY2hlZFJvdXRlcy5ibG9ja3NUb0xpdmUsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyB1bm1hcnNoYWwobWFyc2hhbGxlZENhY2hlZFJvdXRlczogTWFyc2hhbGxlZENhY2hlZFJvdXRlcyk6IENhY2hlZFJvdXRlcyB7XG4gICAgcmV0dXJuIG5ldyBDYWNoZWRSb3V0ZXMoe1xuICAgICAgcm91dGVzOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnJvdXRlcy5tYXAoKHJvdXRlKSA9PiBDYWNoZWRSb3V0ZU1hcnNoYWxsZXIudW5tYXJzaGFsKHJvdXRlKSksXG4gICAgICBjaGFpbklkOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLmNoYWluSWQsXG4gICAgICB0b2tlbkluOiBUb2tlbk1hcnNoYWxsZXIudW5tYXJzaGFsKG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMudG9rZW5JbiksXG4gICAgICB0b2tlbk91dDogVG9rZW5NYXJzaGFsbGVyLnVubWFyc2hhbChtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnRva2VuT3V0KSxcbiAgICAgIHByb3RvY29sc0NvdmVyZWQ6IG1hcnNoYWxsZWRDYWNoZWRSb3V0ZXMucHJvdG9jb2xzQ292ZXJlZCxcbiAgICAgIGJsb2NrTnVtYmVyOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLmJsb2NrTnVtYmVyLFxuICAgICAgdHJhZGVUeXBlOiBtYXJzaGFsbGVkQ2FjaGVkUm91dGVzLnRyYWRlVHlwZSxcbiAgICAgIGJsb2Nrc1RvTGl2ZTogbWFyc2hhbGxlZENhY2hlZFJvdXRlcy5ibG9ja3NUb0xpdmUsXG4gICAgfSlcbiAgfVxufVxuIl19