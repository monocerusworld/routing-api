import { TradeType } from '@uniswap/sdk-core';
import { CacheMode, ChainId } from '@tartz-one/smart-order-router';
import { CachedRoutesStrategy } from './model/cached-routes-strategy';
import { PairTradeTypeChainId } from './model/pair-trade-type-chain-id';
import { CachedRoutesBucket } from './model/cached-routes-bucket';
/**
 * This is the main configuration for the caching strategies of routes.
 *
 * The keys are generated by calling the `toString` method in the `PairTradeTypeChainId` class,
 * this way we can guarantee the correct format of the key.
 *
 * The values are an object of type `CachedRoutesStrategy`.
 * which receive an array of `CachedRoutesParameters` with the configuration of the buckets.
 */
export const CACHED_ROUTES_CONFIGURATION = new Map([
    [
        new PairTradeTypeChainId({
            tokenIn: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
            tokenOut: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
        }).toString(),
        new CachedRoutesStrategy({
            pair: 'WETH/USDC',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
            buckets: [
                new CachedRoutesBucket({ bucket: 1, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 2, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 3, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 5, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 8, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 13, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 21, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 34, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 55, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
            ],
        }),
    ],
    [
        new PairTradeTypeChainId({
            tokenIn: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
            tokenOut: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
        }).toString(),
        new CachedRoutesStrategy({
            pair: 'USDC/WETH',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
            buckets: [
                new CachedRoutesBucket({ bucket: 1000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 2000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 3000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 8000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 13000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 21000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 34000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 55000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 89000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 144000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 233000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 377000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 610000, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
            ],
        }),
    ],
    [
        new PairTradeTypeChainId({
            tokenIn: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
            tokenOut: '*',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
        }).toString(),
        new CachedRoutesStrategy({
            pair: 'WETH/*',
            tradeType: TradeType.EXACT_INPUT,
            chainId: ChainId.MAINNET,
            buckets: [
                new CachedRoutesBucket({ bucket: 1, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 2, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 3, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
                new CachedRoutesBucket({ bucket: 5, blocksToLive: 1, cacheMode: CacheMode.Tapcompare }),
            ],
        }),
    ],
]);
//# sourceMappingURL=data:application/json;base64,