import { metricScope } from 'aws-embedded-metrics';
import { default as bunyan } from 'bunyan';
export class UnsupportedChainError extends Error {
    constructor(chainId) {
        super();
        this.chainId = chainId;
        this.name = 'UnsupportedChainError';
    }
}
export class Injector {
    constructor(injectorName) {
        this.injectorName = injectorName;
    }
    async build() {
        this.containerInjected = await this.buildContainerInjected();
        return this;
    }
    async getContainerInjected() {
        if (this.containerInjected === undefined) {
            throw new Error('Container injected undefined. Must call build() before using.');
        }
        return this.containerInjected;
    }
}
const INTERNAL_ERROR = (id) => {
    return {
        statusCode: 500,
        body: JSON.stringify({
            errorCode: 'INTERNAL_ERROR',
            detail: 'Unexpected error',
            id,
        }),
    };
};
export class APIGLambdaHandler {
    constructor(handlerName, injectorPromise) {
        this.handlerName = handlerName;
        this.injectorPromise = injectorPromise;
    }
    get handler() {
        return async (event, context) => {
            const handler = this.buildHandler();
            const response = await handler(event, context);
            return {
                ...response,
                headers: {
                    ...response.headers,
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                    'Access-Control-Allow-Credentials': true,
                    'Content-Type': 'application/json',
                },
            };
        };
    }
    buildHandler() {
        return metricScope((metric) => async (event, context) => {
            let log = bunyan.createLogger({
                name: this.handlerName,
                serializers: bunyan.stdSerializers,
                level: bunyan.INFO,
                requestId: context.awsRequestId,
            });
            const requestStart = Date.now();
            log.info({ event, context }, 'Request started.');
            let requestBody;
            let requestQueryParams;
            try {
                const requestValidation = await this.parseAndValidateRequest(event, log);
                if (requestValidation.state == 'invalid') {
                    return requestValidation.errorResponse;
                }
                requestBody = requestValidation.requestBody;
                requestQueryParams = requestValidation.requestQueryParams;
            }
            catch (err) {
                log.error({ err }, 'Unexpected error validating request');
                return INTERNAL_ERROR();
            }
            const injector = await this.injectorPromise;
            const containerInjected = await injector.getContainerInjected();
            let requestInjected;
            try {
                requestInjected = await injector.getRequestInjected(containerInjected, requestBody, requestQueryParams, event, context, log, metric);
            }
            catch (err) {
                log.error({ err, event }, 'Unexpected error building request injected.');
                return INTERNAL_ERROR();
            }
            const { id } = requestInjected;
            ({ log } = requestInjected);
            let statusCode;
            let body;
            try {
                const handleRequestResult = await this.handleRequest({
                    context,
                    event,
                    requestBody,
                    requestQueryParams,
                    containerInjected,
                    requestInjected,
                });
                if (this.isError(handleRequestResult)) {
                    log.info({ handleRequestResult }, 'Handler did not return a 200');
                    const { statusCode, detail, errorCode } = handleRequestResult;
                    const response = JSON.stringify({ detail, errorCode, id });
                    log.info({ statusCode, response }, `Request ended. ${statusCode}`);
                    return {
                        statusCode,
                        body: response,
                    };
                }
                else {
                    log.info({ requestBody, requestQueryParams, requestDuration: Date.now() - requestStart }, 'Handler returned 200');
                    ({ body, statusCode } = handleRequestResult);
                }
            }
            catch (err) {
                log.error({ err }, 'Unexpected error in handler');
                return INTERNAL_ERROR(id);
            }
            let response;
            try {
                const responseValidation = await this.parseAndValidateResponse(body, id, log);
                if (responseValidation.state == 'invalid') {
                    return responseValidation.errorResponse;
                }
                response = responseValidation.response;
            }
            catch (err) {
                log.error({ err }, 'Unexpected error validating response');
                return INTERNAL_ERROR(id);
            }
            log.info({ statusCode, response }, `Request ended. ${statusCode}`);
            return {
                statusCode,
                body: JSON.stringify(response),
            };
        });
    }
    isError(result) {
        return result.statusCode != 200 && result.statusCode != 202;
    }
    async parseAndValidateRequest(event, log) {
        let bodyRaw;
        if (event.body) {
            try {
                bodyRaw = JSON.parse(event.body);
            }
            catch (err) {
                return {
                    state: 'invalid',
                    errorResponse: {
                        statusCode: 422,
                        body: JSON.stringify({
                            detail: 'Invalid JSON body',
                            errorCode: 'VALIDATION_ERROR',
                        }),
                    },
                };
            }
        }
        let queryParamsRaw = event.queryStringParameters;
        const queryParamsSchema = this.requestQueryParamsSchema();
        let queryParams;
        if (queryParamsRaw && queryParamsSchema) {
            const queryParamsValidation = queryParamsSchema.validate(queryParamsRaw, {
                allowUnknown: true,
                stripUnknown: true,
            });
            if (queryParamsValidation.error) {
                log.info({ queryParamsValidation }, 'Request failed validation');
                return {
                    state: 'invalid',
                    errorResponse: {
                        statusCode: 400,
                        body: JSON.stringify({
                            detail: queryParamsValidation.error.message,
                            errorCode: 'VALIDATION_ERROR',
                        }),
                    },
                };
            }
            queryParams = queryParamsValidation.value;
        }
        const bodySchema = this.requestBodySchema();
        let body;
        if (bodyRaw && bodySchema) {
            const bodyValidation = bodySchema.validate(bodyRaw, {
                allowUnknown: true,
                stripUnknown: true,
            });
            if (bodyValidation.error) {
                log.info({ bodyValidation }, 'Request failed validation');
                return {
                    state: 'invalid',
                    errorResponse: {
                        statusCode: 400,
                        body: JSON.stringify({
                            detail: bodyValidation.error.message,
                            errorCode: 'VALIDATION_ERROR',
                        }),
                    },
                };
            }
            body = bodyValidation.value;
        }
        return {
            state: 'valid',
            requestBody: body,
            requestQueryParams: queryParams,
        };
    }
    async parseAndValidateResponse(body, id, log) {
        var _a, _b;
        const responseSchema = this.responseBodySchema();
        if (!responseSchema) {
            return { state: 'valid', response: body };
        }
        const res = responseSchema.validate(body, {
            allowUnknown: true,
            stripUnknown: true, // Ensure no unexpected fields returned to users.
        });
        if (res.error) {
            log.error({ error: (_a = res.error) === null || _a === void 0 ? void 0 : _a.details, errors: (_b = res.errors) === null || _b === void 0 ? void 0 : _b.details, body }, 'Unexpected error. Response failed validation.');
            return {
                state: 'invalid',
                errorResponse: INTERNAL_ERROR(id),
            };
        }
        return { state: 'valid', response: res.value };
    }
}
//# sourceMappingURL=data:application/json;base64,