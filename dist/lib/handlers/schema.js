import Joi from '@hapi/joi';
export const QuoteResponseSchemaJoi = Joi.object().keys({
    quoteId: Joi.string().required(),
    amount: Joi.string().required(),
    amountDecimals: Joi.string().required(),
    quote: Joi.string().required(),
    quoteDecimals: Joi.string().required(),
    quoteGasAdjusted: Joi.string().required(),
    quoteGasAdjustedDecimals: Joi.string().required(),
    gasUseEstimateQuote: Joi.string().required(),
    gasUseEstimateQuoteDecimals: Joi.string().required(),
    gasUseEstimate: Joi.string().required(),
    gasUseEstimateUSD: Joi.string().required(),
    simulationError: Joi.boolean().optional(),
    simulationStatus: Joi.string().required(),
    gasPriceWei: Joi.string().required(),
    blockNumber: Joi.string().required(),
    route: Joi.array().items(Joi.any()).required(),
    routeString: Joi.string().required(),
    methodParameters: Joi.object({
        calldata: Joi.string().required(),
        value: Joi.string().required(),
        to: Joi.string().required(),
    }).optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2hhbmRsZXJzL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEdBQUcsTUFBTSxXQUFXLENBQUE7QUF1QzNCLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDdEQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDaEMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDL0IsY0FBYyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDdkMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDOUIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDdEMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUN6Qyx3QkFBd0IsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2pELG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDNUMsMkJBQTJCLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNwRCxjQUFjLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUN2QyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQzFDLGVBQWUsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3pDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDekMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDcEMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDcEMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQzlDLFdBQVcsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3BDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDM0IsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDakMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDOUIsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7S0FDNUIsQ0FBQyxDQUFDLFFBQVEsRUFBRTtDQUNkLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBKb2kgZnJvbSAnQGhhcGkvam9pJ1xuaW1wb3J0IHsgTWV0aG9kUGFyYW1ldGVycyB9IGZyb20gJ0B0YXJ0ei1vbmUvc21hcnQtb3JkZXItcm91dGVyJ1xuXG5leHBvcnQgdHlwZSBUb2tlbkluUm91dGUgPSB7XG4gIGFkZHJlc3M6IHN0cmluZ1xuICBjaGFpbklkOiBudW1iZXJcbiAgc3ltYm9sOiBzdHJpbmdcbiAgZGVjaW1hbHM6IHN0cmluZ1xufVxuXG5leHBvcnQgdHlwZSBWM1Bvb2xJblJvdXRlID0ge1xuICB0eXBlOiAndjMtcG9vbCdcbiAgYWRkcmVzczogc3RyaW5nXG4gIHRva2VuSW46IFRva2VuSW5Sb3V0ZVxuICB0b2tlbk91dDogVG9rZW5JblJvdXRlXG4gIHNxcnRSYXRpb1g5Njogc3RyaW5nXG4gIGxpcXVpZGl0eTogc3RyaW5nXG4gIHRpY2tDdXJyZW50OiBzdHJpbmdcbiAgZmVlOiBzdHJpbmdcbiAgYW1vdW50SW4/OiBzdHJpbmdcbiAgYW1vdW50T3V0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFYyUmVzZXJ2ZSA9IHtcbiAgdG9rZW46IFRva2VuSW5Sb3V0ZVxuICBxdW90aWVudDogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFYyUG9vbEluUm91dGUgPSB7XG4gIHR5cGU6ICd2Mi1wb29sJ1xuICBhZGRyZXNzOiBzdHJpbmdcbiAgdG9rZW5JbjogVG9rZW5JblJvdXRlXG4gIHRva2VuT3V0OiBUb2tlbkluUm91dGVcbiAgcmVzZXJ2ZTA6IFYyUmVzZXJ2ZVxuICByZXNlcnZlMTogVjJSZXNlcnZlXG4gIGFtb3VudEluPzogc3RyaW5nXG4gIGFtb3VudE91dD86IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgUXVvdGVSZXNwb25zZVNjaGVtYUpvaSA9IEpvaS5vYmplY3QoKS5rZXlzKHtcbiAgcXVvdGVJZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGFtb3VudDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGFtb3VudERlY2ltYWxzOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgcXVvdGU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBxdW90ZURlY2ltYWxzOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgcXVvdGVHYXNBZGp1c3RlZDogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIHF1b3RlR2FzQWRqdXN0ZWREZWNpbWFsczogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGdhc1VzZUVzdGltYXRlUXVvdGU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBnYXNVc2VFc3RpbWF0ZVF1b3RlRGVjaW1hbHM6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBnYXNVc2VFc3RpbWF0ZTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGdhc1VzZUVzdGltYXRlVVNEOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgc2ltdWxhdGlvbkVycm9yOiBKb2kuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIHNpbXVsYXRpb25TdGF0dXM6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBnYXNQcmljZVdlaTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gIGJsb2NrTnVtYmVyOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgcm91dGU6IEpvaS5hcnJheSgpLml0ZW1zKEpvaS5hbnkoKSkucmVxdWlyZWQoKSxcbiAgcm91dGVTdHJpbmc6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICBtZXRob2RQYXJhbWV0ZXJzOiBKb2kub2JqZWN0KHtcbiAgICBjYWxsZGF0YTogSm9pLnN0cmluZygpLnJlcXVpcmVkKCksXG4gICAgdmFsdWU6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgIHRvOiBKb2kuc3RyaW5nKCkucmVxdWlyZWQoKSxcbiAgfSkub3B0aW9uYWwoKSxcbn0pXG5cbmV4cG9ydCB0eXBlIFF1b3RlUmVzcG9uc2UgPSB7XG4gIHF1b3RlSWQ6IHN0cmluZ1xuICBhbW91bnQ6IHN0cmluZ1xuICBhbW91bnREZWNpbWFsczogc3RyaW5nXG4gIHF1b3RlOiBzdHJpbmdcbiAgcXVvdGVEZWNpbWFsczogc3RyaW5nXG4gIHF1b3RlR2FzQWRqdXN0ZWQ6IHN0cmluZ1xuICBxdW90ZUdhc0FkanVzdGVkRGVjaW1hbHM6IHN0cmluZ1xuICBnYXNVc2VFc3RpbWF0ZTogc3RyaW5nXG4gIGdhc1VzZUVzdGltYXRlUXVvdGU6IHN0cmluZ1xuICBnYXNVc2VFc3RpbWF0ZVF1b3RlRGVjaW1hbHM6IHN0cmluZ1xuICBnYXNVc2VFc3RpbWF0ZVVTRDogc3RyaW5nXG4gIHNpbXVsYXRpb25FcnJvcj86IGJvb2xlYW5cbiAgc2ltdWxhdGlvblN0YXR1czogc3RyaW5nXG4gIGdhc1ByaWNlV2VpOiBzdHJpbmdcbiAgYmxvY2tOdW1iZXI6IHN0cmluZ1xuICByb3V0ZTogQXJyYXk8KFYzUG9vbEluUm91dGUgfCBWMlBvb2xJblJvdXRlKVtdPlxuICByb3V0ZVN0cmluZzogc3RyaW5nXG4gIG1ldGhvZFBhcmFtZXRlcnM/OiBNZXRob2RQYXJhbWV0ZXJzXG59XG4iXX0=