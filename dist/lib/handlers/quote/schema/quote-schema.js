import BaseJoi from '@hapi/joi';
import { SUPPORTED_CHAINS } from '../../injector-sor';
const Joi = BaseJoi.extend((joi) => ({
    base: joi.array(),
    type: 'stringArray',
    messages: {
        'stringArray.type': '{{#label}} is not a valid string array',
    },
    coerce: (value, helpers) => {
        if (typeof value !== 'string') {
            return { value: value, errors: [helpers.error('stringArray.type')] };
        }
        value = value.replace(/^\[|\]$/g, '').split(',');
        const ar = value.map((val) => {
            return val.trim();
        });
        return { value: ar };
    },
}));
export const QuoteQueryParamsJoi = Joi.object({
    tokenInAddress: Joi.string().alphanum().max(42).required(),
    tokenInChainId: Joi.number()
        .valid(...SUPPORTED_CHAINS.values())
        .required(),
    tokenOutAddress: Joi.string().alphanum().max(42).required(),
    tokenOutChainId: Joi.number()
        .valid(...SUPPORTED_CHAINS.values())
        .required(),
    amount: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(77) // TODO: validate < 2**256
        .required(),
    type: Joi.string().valid('exactIn', 'exactOut').required(),
    recipient: Joi.string()
        .pattern(new RegExp(/^0x[a-fA-F0-9]{40}$/))
        .optional(),
    slippageTolerance: Joi.number().min(0).max(20).precision(2).optional(),
    deadline: Joi.number().max(10800).optional(),
    algorithm: Joi.string().valid('alpha', 'legacy').optional(),
    gasPriceWei: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(30)
        .optional(),
    minSplits: Joi.number().max(7).optional(),
    forceCrossProtocol: Joi.boolean().optional(),
    forceMixedRoutes: Joi.boolean().optional(),
    protocols: Joi.stringArray().items(Joi.string().valid('v2', 'v3', 'mixed')).optional(),
    simulateFromAddress: Joi.string().alphanum().max(42).optional(),
    permitSignature: Joi.string().optional(),
    permitNonce: Joi.string().optional(),
    permitExpiration: Joi.number().optional(),
    permitAmount: Joi.string()
        .pattern(/^[0-9]+$/)
        .max(77),
    permitSigDeadline: Joi.number().optional(),
    // TODO: Remove once universal router is no longer behind a feature flag.
    enableUniversalRouter: Joi.boolean().optional().default(false),
}).and('recipient', 'slippageTolerance', 'deadline');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvdGUtc2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL2hhbmRsZXJzL3F1b3RlL3NjaGVtYS9xdW90ZS1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFBO0FBQy9CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXJELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUU7SUFDakIsSUFBSSxFQUFFLGFBQWE7SUFDbkIsUUFBUSxFQUFFO1FBQ1Isa0JBQWtCLEVBQUUsd0NBQXdDO0tBQzdEO0lBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQ3pCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUE7U0FDckU7UUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hELE1BQU0sRUFBRSxHQUFJLEtBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDekMsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDbkIsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBQ3RCLENBQUM7Q0FDRixDQUFDLENBQUMsQ0FBQTtBQUVILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxN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SUFDekUscUJBQXFCLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7Q0FDL0QsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZUpvaSBmcm9tICdAaGFwaS9qb2knXG5pbXBvcnQgeyBTVVBQT1JURURfQ0hBSU5TIH0gZnJvbSAnLi4vLi4vaW5qZWN0b3Itc29yJ1xuXG5jb25zdCBKb2kgPSBCYXNlSm9pLmV4dGVuZCgoam9pKSA9PiAoe1xuICBiYXNlOiBqb2kuYXJyYXkoKSxcbiAgdHlwZTogJ3N0cmluZ0FycmF5JyxcbiAgbWVzc2FnZXM6IHtcbiAgICAnc3RyaW5nQXJyYXkudHlwZSc6ICd7eyNsYWJlbH19IGlzIG5vdCBhIHZhbGlkIHN0cmluZyBhcnJheScsXG4gIH0sXG4gIGNvZXJjZTogKHZhbHVlLCBoZWxwZXJzKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZXJyb3JzOiBbaGVscGVycy5lcnJvcignc3RyaW5nQXJyYXkudHlwZScpXSB9XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKS5zcGxpdCgnLCcpXG4gICAgY29uc3QgYXIgPSAodmFsdWUgYXMgc3RyaW5nW10pLm1hcCgodmFsKSA9PiB7XG4gICAgICByZXR1cm4gdmFsLnRyaW0oKVxuICAgIH0pXG4gICAgcmV0dXJuIHsgdmFsdWU6IGFyIH1cbiAgfSxcbn0pKVxuXG5leHBvcnQgY29uc3QgUXVvdGVRdWVyeVBhcmFtc0pvaSA9IEpvaS5vYmplY3Qoe1xuICB0b2tlbkluQWRkcmVzczogSm9pLnN0cmluZygpLmFscGhhbnVtKCkubWF4KDQyKS5yZXF1aXJlZCgpLFxuICB0b2tlbkluQ2hhaW5JZDogSm9pLm51bWJlcigpXG4gICAgLnZhbGlkKC4uLlNVUFBPUlRFRF9DSEFJTlMudmFsdWVzKCkpXG4gICAgLnJlcXVpcmVkKCksXG4gIHRva2VuT3V0QWRkcmVzczogSm9pLnN0cmluZygpLmFscGhhbnVtKCkubWF4KDQyKS5yZXF1aXJlZCgpLFxuICB0b2tlbk91dENoYWluSWQ6IEpvaS5udW1iZXIoKVxuICAgIC52YWxpZCguLi5TVVBQT1JURURfQ0hBSU5TLnZhbHVlcygpKVxuICAgIC5yZXF1aXJlZCgpLFxuICBhbW91bnQ6IEpvaS5zdHJpbmcoKVxuICAgIC5wYXR0ZXJuKC9eWzAtOV0rJC8pXG4gICAgLm1heCg3NykgLy8gVE9ETzogdmFsaWRhdGUgPCAyKioyNTZcbiAgICAucmVxdWlyZWQoKSxcbiAgdHlwZTogSm9pLnN0cmluZygpLnZhbGlkKCdleGFjdEluJywgJ2V4YWN0T3V0JykucmVxdWlyZWQoKSxcbiAgcmVjaXBpZW50OiBKb2kuc3RyaW5nKClcbiAgICAucGF0dGVybihuZXcgUmVnRXhwKC9eMHhbYS1mQS1GMC05XXs0MH0kLykpXG4gICAgLm9wdGlvbmFsKCksXG4gIHNsaXBwYWdlVG9sZXJhbmNlOiBKb2kubnVtYmVyKCkubWluKDApLm1heCgyMCkucHJlY2lzaW9uKDIpLm9wdGlvbmFsKCksXG4gIGRlYWRsaW5lOiBKb2kubnVtYmVyKCkubWF4KDEwODAwKS5vcHRpb25hbCgpLCAvLyAxODAgbWlucywgc2FtZSBhcyBpbnRlcmZhY2UgbWF4XG4gIGFsZ29yaXRobTogSm9pLnN0cmluZygpLnZhbGlkKCdhbHBoYScsICdsZWdhY3knKS5vcHRpb25hbCgpLFxuICBnYXNQcmljZVdlaTogSm9pLnN0cmluZygpXG4gICAgLnBhdHRlcm4oL15bMC05XSskLylcbiAgICAubWF4KDMwKVxuICAgIC5vcHRpb25hbCgpLFxuICBtaW5TcGxpdHM6IEpvaS5udW1iZXIoKS5tYXgoNykub3B0aW9uYWwoKSxcbiAgZm9yY2VDcm9zc1Byb3RvY29sOiBKb2kuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGZvcmNlTWl4ZWRSb3V0ZXM6IEpvaS5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgcHJvdG9jb2xzOiBKb2kuc3RyaW5nQXJyYXkoKS5pdGVtcyhKb2kuc3RyaW5nKCkudmFsaWQoJ3YyJywgJ3YzJywgJ21peGVkJykpLm9wdGlvbmFsKCksXG4gIHNpbXVsYXRlRnJvbUFkZHJlc3M6IEpvaS5zdHJpbmcoKS5hbHBoYW51bSgpLm1heCg0Mikub3B0aW9uYWwoKSxcbiAgcGVybWl0U2lnbmF0dXJlOiBKb2kuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGVybWl0Tm9uY2U6IEpvaS5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBwZXJtaXRFeHBpcmF0aW9uOiBKb2kubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgcGVybWl0QW1vdW50OiBKb2kuc3RyaW5nKClcbiAgICAucGF0dGVybigvXlswLTldKyQvKVxuICAgIC5tYXgoNzcpLFxuICBwZXJtaXRTaWdEZWFkbGluZTogSm9pLm51bWJlcigpLm9wdGlvbmFsKCksXG4gIC8vIFRPRE86IFJlbW92ZSBvbmNlIHVuaXZlcnNhbCByb3V0ZXIgaXMgbm8gbG9uZ2VyIGJlaGluZCBhIGZlYXR1cmUgZmxhZy5cbiAgZW5hYmxlVW5pdmVyc2FsUm91dGVyOiBKb2kuYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG59KS5hbmQoJ3JlY2lwaWVudCcsICdzbGlwcGFnZVRvbGVyYW5jZScsICdkZWFkbGluZScpXG5cbmV4cG9ydCB0eXBlIFF1b3RlUXVlcnlQYXJhbXMgPSB7XG4gIHRva2VuSW5BZGRyZXNzOiBzdHJpbmdcbiAgdG9rZW5JbkNoYWluSWQ6IG51bWJlclxuICB0b2tlbk91dEFkZHJlc3M6IHN0cmluZ1xuICB0b2tlbk91dENoYWluSWQ6IG51bWJlclxuICBhbW91bnQ6IHN0cmluZ1xuICB0eXBlOiBzdHJpbmdcbiAgcmVjaXBpZW50Pzogc3RyaW5nXG4gIHNsaXBwYWdlVG9sZXJhbmNlPzogc3RyaW5nXG4gIGRlYWRsaW5lPzogc3RyaW5nXG4gIGFsZ29yaXRobT86IHN0cmluZ1xuICBnYXNQcmljZVdlaT86IHN0cmluZ1xuICBtaW5TcGxpdHM/OiBudW1iZXJcbiAgZm9yY2VDcm9zc1Byb3RvY29sPzogYm9vbGVhblxuICBmb3JjZU1peGVkUm91dGVzPzogYm9vbGVhblxuICBwcm90b2NvbHM/OiBzdHJpbmdbXSB8IHN0cmluZ1xuICBzaW11bGF0ZUZyb21BZGRyZXNzPzogc3RyaW5nXG4gIHBlcm1pdFNpZ25hdHVyZT86IHN0cmluZ1xuICBwZXJtaXROb25jZT86IHN0cmluZ1xuICBwZXJtaXRFeHBpcmF0aW9uPzogc3RyaW5nXG4gIHBlcm1pdEFtb3VudD86IHN0cmluZ1xuICBwZXJtaXRTaWdEZWFkbGluZT86IHN0cmluZ1xuICBlbmFibGVVbml2ZXJzYWxSb3V0ZXI/OiBib29sZWFuXG59XG4iXX0=