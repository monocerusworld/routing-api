import { AlphaRouter, ID_TO_CHAIN_ID, setGlobalLogger, setGlobalMetric, V3HeuristicGasModelFactory, } from '@tartz-one/smart-order-router';
import { default as bunyan } from 'bunyan';
import { BigNumber } from 'ethers';
import { InjectorSOR } from '../injector-sor';
import { AWSMetricsLogger } from '../router-entities/aws-metrics-logger';
import { StaticGasPriceProvider } from '../router-entities/static-gas-price-provider';
export class QuoteToRatioHandlerInjector extends InjectorSOR {
    async getRequestInjected(containerInjected, _requestBody, requestQueryParams, _event, context, log, metricsLogger) {
        const requestId = context.awsRequestId;
        const quoteId = requestId.substring(0, 5);
        const logLevel = bunyan.INFO;
        const { token0Address, token0ChainId, token1Address, token1ChainId, token0Balance, token1Balance, tickLower, tickUpper, gasPriceWei, } = requestQueryParams;
        log = log.child({
            serializers: bunyan.stdSerializers,
            level: logLevel,
            token0Address,
            token0ChainId,
            token1Address,
            token1ChainId,
            token0Balance,
            token1Balance,
            tickLower,
            tickUpper,
        });
        setGlobalLogger(log);
        metricsLogger.setNamespace('Uniswap');
        metricsLogger.setDimensions({ Service: 'RoutingAPI' });
        const metric = new AWSMetricsLogger(metricsLogger);
        setGlobalMetric(metric);
        // Today API is restricted such that both tokens must be on the same chain.
        const chainId = token0ChainId;
        const chainIdEnum = ID_TO_CHAIN_ID(chainId);
        const { dependencies } = containerInjected;
        if (!dependencies[chainIdEnum]) {
            // Request validation should prevent reject unsupported chains with 4xx already, so this should not be possible.
            throw new Error(`No container injected dependencies for chain: ${chainIdEnum}`);
        }
        const { provider, v3PoolProvider, multicallProvider, tokenProvider, tokenListProvider, v3SubgraphProvider, blockedTokenListProvider, onChainQuoteProvider, v2PoolProvider, v2QuoteProvider, v2SubgraphProvider, gasPriceProvider: gasPriceProviderOnChain, } = dependencies[chainIdEnum];
        let gasPriceProvider = gasPriceProviderOnChain;
        if (gasPriceWei) {
            const gasPriceWeiBN = BigNumber.from(gasPriceWei);
            gasPriceProvider = new StaticGasPriceProvider(gasPriceWeiBN);
        }
        let router = new AlphaRouter({
            chainId,
            provider,
            v3SubgraphProvider,
            multicall2Provider: multicallProvider,
            v3PoolProvider,
            onChainQuoteProvider,
            gasPriceProvider,
            v3GasModelFactory: new V3HeuristicGasModelFactory(),
            blockedTokenListProvider,
            tokenProvider,
            v2PoolProvider,
            v2QuoteProvider,
            v2SubgraphProvider,
        });
        return {
            chainId: chainIdEnum,
            id: quoteId,
            log,
            metric,
            router,
            v3PoolProvider,
            v2PoolProvider,
            tokenProvider,
            tokenListProvider,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,