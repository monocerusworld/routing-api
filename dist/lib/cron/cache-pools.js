import { setGlobalLogger } from '@tartz-one/smart-order-router';
import { S3 } from 'aws-sdk';
import { default as bunyan } from 'bunyan';
import { S3_POOL_CACHE_KEY } from '../util/pool-cache-key';
import { chainProtocols } from './cache-config';
const handler = async (event) => {
    const chainId = parseInt(process.env.chainId);
    const protocol = process.env.protocol;
    // Don't retry for V2 as it will timeout and throw 500
    const provider = chainProtocols.find((element) => element.protocol == protocol && element.chainId == chainId).provider;
    const log = bunyan.createLogger({
        name: 'RoutingLambda',
        serializers: bunyan.stdSerializers,
        level: 'info',
        requestId: event.id,
    });
    setGlobalLogger(log);
    const s3 = new S3();
    log.info(`Getting pools for ${protocol} on ${chainId}`);
    let pools;
    try {
        pools = await provider.getPools();
    }
    catch (err) {
        log.error({ err }, `Failed to get pools for ${protocol} on ${chainId}`);
        throw new Error(`Failed to get pools for ${protocol} on ${chainId}`);
    }
    if (!pools || pools.length == 0) {
        log.info(`No ${protocol} pools found from the subgraph for ${chainId.toString()}`);
        return;
    }
    const key = S3_POOL_CACHE_KEY(process.env.POOL_CACHE_KEY, chainId, protocol);
    log.info(`Got ${pools.length} ${protocol} pools from the subgraph for ${chainId.toString()}. Saving to ${key}`);
    const result = await s3
        .putObject({
        Bucket: process.env.POOL_CACHE_BUCKET_2,
        Key: key,
        Body: JSON.stringify(pools),
    })
        .promise();
    log.info({ result }, `Done ${protocol} for ${chainId.toString()}`);
    log.info(`Successfully cached ${chainId} ${protocol} pools to S3`);
};
module.exports = { handler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtcG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY3Jvbi9jYWNoZS1wb29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQVcsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFFeEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUM1QixPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBcUIsTUFBTSxRQUFRLENBQUE7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBRS9DLE1BQU0sT0FBTyxHQUFxQixLQUFLLEVBQUUsS0FBcUMsRUFBRSxFQUFFO0lBQ2hGLE1BQU0sT0FBTyxHQUFZLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQVEsQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBcUIsQ0FBQTtJQUNsRCxzREFBc0Q7SUFDdEQsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FDbEMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksUUFBUSxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUN2RSxDQUFDLFFBQVEsQ0FBQTtJQUNYLE1BQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdEMsSUFBSSxFQUFFLGVBQWU7UUFDckIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxjQUFjO1FBQ2xDLEtBQUssRUFBRSxNQUFNO1FBQ2IsU0FBUyxFQUFFLEtBQUssQ0FBQyxFQUFFO0tBQ3BCLENBQUMsQ0FBQTtJQUNGLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVwQixNQUFNLEVBQUUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFBO0lBRW5CLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLFFBQVEsT0FBTyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBRXZELElBQUksS0FBSyxDQUFBO0lBQ1QsSUFBSTtRQUNGLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtLQUNsQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLDJCQUEyQixRQUFRLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUN2RSxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixRQUFRLE9BQU8sT0FBTyxFQUFFLENBQUMsQ0FBQTtLQUNyRTtJQUVELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLFFBQVEsc0NBQXNDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDbEYsT0FBTTtLQUNQO0lBRUQsTUFBTSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFlLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRTdFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsTUFBTSxJQUFJLFFBQVEsZ0NBQWdDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsZUFBZSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBRS9HLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRTtTQUNwQixTQUFTLENBQUM7UUFDVCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0I7UUFDeEMsR0FBRyxFQUFFLEdBQUc7UUFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7S0FDNUIsQ0FBQztTQUNELE9BQU8sRUFBRSxDQUFBO0lBRVosR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLFFBQVEsUUFBUSxRQUFRLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFbEUsR0FBRyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsT0FBTyxJQUFJLFFBQVEsY0FBYyxDQUFDLENBQUE7QUFDcEUsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICdAdW5pc3dhcC9yb3V0ZXItc2RrJ1xuaW1wb3J0IHsgQ2hhaW5JZCwgc2V0R2xvYmFsTG9nZ2VyIH0gZnJvbSAnQHRhcnR6LW9uZS9zbWFydC1vcmRlci1yb3V0ZXInXG5pbXBvcnQgeyBFdmVudEJyaWRnZUV2ZW50LCBTY2hlZHVsZWRIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSdcbmltcG9ydCB7IFMzIH0gZnJvbSAnYXdzLXNkaydcbmltcG9ydCB7IGRlZmF1bHQgYXMgYnVueWFuLCBkZWZhdWx0IGFzIExvZ2dlciB9IGZyb20gJ2J1bnlhbidcbmltcG9ydCB7IFMzX1BPT0xfQ0FDSEVfS0VZIH0gZnJvbSAnLi4vdXRpbC9wb29sLWNhY2hlLWtleSdcbmltcG9ydCB7IGNoYWluUHJvdG9jb2xzIH0gZnJvbSAnLi9jYWNoZS1jb25maWcnXG5cbmNvbnN0IGhhbmRsZXI6IFNjaGVkdWxlZEhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEV2ZW50QnJpZGdlRXZlbnQ8c3RyaW5nLCB2b2lkPikgPT4ge1xuICBjb25zdCBjaGFpbklkOiBDaGFpbklkID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuY2hhaW5JZCEpXG4gIGNvbnN0IHByb3RvY29sID0gcHJvY2Vzcy5lbnYucHJvdG9jb2whIGFzIFByb3RvY29sXG4gIC8vIERvbid0IHJldHJ5IGZvciBWMiBhcyBpdCB3aWxsIHRpbWVvdXQgYW5kIHRocm93IDUwMFxuICBjb25zdCBwcm92aWRlciA9IGNoYWluUHJvdG9jb2xzLmZpbmQoXG4gICAgKGVsZW1lbnQpID0+IGVsZW1lbnQucHJvdG9jb2wgPT0gcHJvdG9jb2wgJiYgZWxlbWVudC5jaGFpbklkID09IGNoYWluSWRcbiAgKSEucHJvdmlkZXJcbiAgY29uc3QgbG9nOiBMb2dnZXIgPSBidW55YW4uY3JlYXRlTG9nZ2VyKHtcbiAgICBuYW1lOiAnUm91dGluZ0xhbWJkYScsXG4gICAgc2VyaWFsaXplcnM6IGJ1bnlhbi5zdGRTZXJpYWxpemVycyxcbiAgICBsZXZlbDogJ2luZm8nLFxuICAgIHJlcXVlc3RJZDogZXZlbnQuaWQsXG4gIH0pXG4gIHNldEdsb2JhbExvZ2dlcihsb2cpXG5cbiAgY29uc3QgczMgPSBuZXcgUzMoKVxuXG4gIGxvZy5pbmZvKGBHZXR0aW5nIHBvb2xzIGZvciAke3Byb3RvY29sfSBvbiAke2NoYWluSWR9YClcblxuICBsZXQgcG9vbHNcbiAgdHJ5IHtcbiAgICBwb29scyA9IGF3YWl0IHByb3ZpZGVyLmdldFBvb2xzKClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKHsgZXJyIH0sIGBGYWlsZWQgdG8gZ2V0IHBvb2xzIGZvciAke3Byb3RvY29sfSBvbiAke2NoYWluSWR9YClcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBnZXQgcG9vbHMgZm9yICR7cHJvdG9jb2x9IG9uICR7Y2hhaW5JZH1gKVxuICB9XG5cbiAgaWYgKCFwb29scyB8fCBwb29scy5sZW5ndGggPT0gMCkge1xuICAgIGxvZy5pbmZvKGBObyAke3Byb3RvY29sfSBwb29scyBmb3VuZCBmcm9tIHRoZSBzdWJncmFwaCBmb3IgJHtjaGFpbklkLnRvU3RyaW5nKCl9YClcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IGtleSA9IFMzX1BPT0xfQ0FDSEVfS0VZKHByb2Nlc3MuZW52LlBPT0xfQ0FDSEVfS0VZISwgY2hhaW5JZCwgcHJvdG9jb2wpXG5cbiAgbG9nLmluZm8oYEdvdCAke3Bvb2xzLmxlbmd0aH0gJHtwcm90b2NvbH0gcG9vbHMgZnJvbSB0aGUgc3ViZ3JhcGggZm9yICR7Y2hhaW5JZC50b1N0cmluZygpfS4gU2F2aW5nIHRvICR7a2V5fWApXG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgczNcbiAgICAucHV0T2JqZWN0KHtcbiAgICAgIEJ1Y2tldDogcHJvY2Vzcy5lbnYuUE9PTF9DQUNIRV9CVUNLRVRfMiEsXG4gICAgICBLZXk6IGtleSxcbiAgICAgIEJvZHk6IEpTT04uc3RyaW5naWZ5KHBvb2xzKSxcbiAgICB9KVxuICAgIC5wcm9taXNlKClcblxuICBsb2cuaW5mbyh7IHJlc3VsdCB9LCBgRG9uZSAke3Byb3RvY29sfSBmb3IgJHtjaGFpbklkLnRvU3RyaW5nKCl9YClcblxuICBsb2cuaW5mbyhgU3VjY2Vzc2Z1bGx5IGNhY2hlZCAke2NoYWluSWR9ICR7cHJvdG9jb2x9IHBvb2xzIHRvIFMzYClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGhhbmRsZXIgfVxuIl19